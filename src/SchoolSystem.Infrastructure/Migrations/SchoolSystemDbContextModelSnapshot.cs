// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolSystem.Infrastructure.Persistence.Context;

#nullable disable

namespace SchoolSystem.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolSystemDbContext))]
    partial class SchoolSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HistorialPuntos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoPuntosId")
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrigenId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PuntosAcumulados")
                        .HasColumnType("int");

                    b.Property<int>("PuntosObtenidos")
                        .HasColumnType("int");

                    b.Property<string>("TipoOrigen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoPuntosId")
                        .HasDatabaseName("IX_HistorialPuntos_AlumnoPuntosId");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_HistorialPuntos_Categoria");

                    b.HasIndex("Fecha")
                        .HasDatabaseName("IX_HistorialPuntos_Fecha");

                    b.HasIndex("PuntosObtenidos")
                        .HasDatabaseName("IX_HistorialPuntos_PuntosObtenidos");

                    b.HasIndex("TipoOrigen")
                        .HasDatabaseName("IX_HistorialPuntos_TipoOrigen");

                    b.HasIndex("AlumnoPuntosId", "Categoria")
                        .HasDatabaseName("IX_HistorialPuntos_AlumnoPuntos_Categoria");

                    b.HasIndex("AlumnoPuntosId", "Fecha")
                        .HasDatabaseName("IX_HistorialPuntos_AlumnoPuntos_Fecha");

                    b.HasIndex("Fecha", "Categoria")
                        .HasDatabaseName("IX_HistorialPuntos_Fecha_Categoria");

                    b.HasIndex("TipoOrigen", "OrigenId")
                        .HasDatabaseName("IX_HistorialPuntos_TipoOrigen_OrigenId");

                    b.ToTable("HistorialPuntos", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Alumno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Alergias")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("alergias");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("CURP")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("curp");

                    b.Property<string>("CondicionesMedicas")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("condiciones_medicas");

                    b.Property<string>("ContactoEmergenciaNombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contacto_emergencia_nombre");

                    b.Property<string>("ContactoEmergenciaRelacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contacto_emergencia_relacion");

                    b.Property<string>("ContactoEmergenciaTelefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contacto_emergencia_telefono");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int")
                        .HasColumnName("escuela_id");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Activo")
                        .HasColumnName("estatus");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_baja");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_ingreso");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("FotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("foto_url");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("genero");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("matricula");

                    b.Property<string>("Medicamentos")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("medicamentos");

                    b.Property<string>("MotivoBaja")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("motivo_baja");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("observaciones");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.Property<string>("TipoSangre")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("tipo_sangre");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("CURP")
                        .IsUnique()
                        .HasDatabaseName("idx_alumno_curp")
                        .HasFilter("curp IS NOT NULL");

                    b.HasIndex("Estatus")
                        .HasDatabaseName("idx_alumno_estatus");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_alumno_is_deleted");

                    b.HasIndex("Matricula")
                        .IsUnique()
                        .HasDatabaseName("idx_alumno_matricula");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.HasIndex("EscuelaId", "Estatus")
                        .HasDatabaseName("idx_alumno_escuela_estatus");

                    b.ToTable("alumnos", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.AlumnoPadre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int")
                        .HasColumnName("alumno_id");

                    b.Property<bool>("AutorizadoRecoger")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("autorizado_recoger");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EsTutorPrincipal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("es_tutor_principal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PadreId")
                        .HasColumnType("int")
                        .HasColumnName("padre_id");

                    b.Property<bool>("RecibeNotificaciones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("recibe_notificaciones");

                    b.Property<string>("Relacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("relacion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ViveConAlumno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("vive_con_alumno");

                    b.HasKey("Id");

                    b.HasIndex("PadreId")
                        .HasDatabaseName("idx_alumno_padre_padre_id");

                    b.HasIndex("AlumnoId", "PadreId")
                        .IsUnique()
                        .HasDatabaseName("idx_alumno_padre_unique");

                    b.ToTable("alumno_padres", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Grado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("CapacidadMaximaPorGrupo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("EdadRecomendada")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int?>("HorasSemanales")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NivelEducativoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Requisitos")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Grados_Activo");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Grados_EscuelaId");

                    b.HasIndex("NivelEducativoId")
                        .HasDatabaseName("IX_Grados_NivelEducativoId");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_Grados_Nombre");

                    b.HasIndex("Orden")
                        .HasDatabaseName("IX_Grados_Orden");

                    b.HasIndex("EscuelaId", "Activo")
                        .HasDatabaseName("IX_Grados_Escuela_Activo");

                    b.HasIndex("EscuelaId", "NivelEducativoId", "Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_Grados_Escuela_Nivel_Nombre_Unique");

                    b.HasIndex("EscuelaId", "NivelEducativoId", "Orden")
                        .IsUnique()
                        .HasDatabaseName("IX_Grados_Escuela_Nivel_Orden_Unique");

                    b.HasIndex("NivelEducativoId", "Activo", "Orden")
                        .HasDatabaseName("IX_Grados_Nivel_Activo_Orden");

                    b.ToTable("Grados", null, t =>
                        {
                            t.HasCheckConstraint("CK_Grados_CapacidadMaximaPorGrupo", "`CapacidadMaximaPorGrupo` IS NULL OR `CapacidadMaximaPorGrupo` > 0");

                            t.HasCheckConstraint("CK_Grados_EdadRecomendada", "`EdadRecomendada` IS NULL OR (`EdadRecomendada` >= 0 AND `EdadRecomendada` <= 25)");

                            t.HasCheckConstraint("CK_Grados_HorasSemanales", "`HorasSemanales` IS NULL OR `HorasSemanales` > 0");

                            t.HasCheckConstraint("CK_Grados_Orden", "`Orden` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.GradoMateria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int>("GradoId")
                        .HasColumnType("int");

                    b.Property<int?>("GradoId1")
                        .HasColumnType("int");

                    b.Property<int?>("HorasSemanales")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.Property<bool>("Obligatoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("Orden")
                        .HasColumnType("int");

                    b.Property<decimal?>("PorcentajePeso")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_GradoMaterias_EscuelaId");

                    b.HasIndex("GradoId")
                        .HasDatabaseName("IX_GradoMaterias_GradoId");

                    b.HasIndex("GradoId1");

                    b.HasIndex("MateriaId")
                        .HasDatabaseName("IX_GradoMaterias_MateriaId");

                    b.HasIndex("Obligatoria")
                        .HasDatabaseName("IX_GradoMaterias_Obligatoria");

                    b.HasIndex("GradoId", "Orden")
                        .HasDatabaseName("IX_GradoMaterias_Grado_Orden");

                    b.HasIndex("EscuelaId", "GradoId", "MateriaId")
                        .IsUnique()
                        .HasDatabaseName("IX_GradoMaterias_Escuela_Grado_Materia_Unique");

                    b.ToTable("GradoMaterias", null, t =>
                        {
                            t.HasCheckConstraint("CK_GradoMaterias_HorasSemanales", "`HorasSemanales` IS NULL OR `HorasSemanales` > 0");

                            t.HasCheckConstraint("CK_GradoMaterias_Orden", "`Orden` IS NULL OR `Orden` >= 0");

                            t.HasCheckConstraint("CK_GradoMaterias_PorcentajePeso", "`PorcentajePeso` IS NULL OR (`PorcentajePeso` >= 0 AND `PorcentajePeso` <= 100)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Aula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CapacidadMaxima")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<string>("CicloEscolar")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DiasClase")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int?>("EscuelaId1")
                        .HasColumnType("int");

                    b.Property<int>("GradoId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("HoraFin")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MaestroTitularId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Turno")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Grupos_Activo");

                    b.HasIndex("CicloEscolar")
                        .HasDatabaseName("IX_Grupos_CicloEscolar");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Grupos_EscuelaId");

                    b.HasIndex("EscuelaId1");

                    b.HasIndex("GradoId")
                        .HasDatabaseName("IX_Grupos_GradoId");

                    b.HasIndex("MaestroTitularId")
                        .HasDatabaseName("IX_Grupos_MaestroTitularId");

                    b.HasIndex("Turno")
                        .HasDatabaseName("IX_Grupos_Turno");

                    b.HasIndex("EscuelaId", "CicloEscolar", "Activo")
                        .HasDatabaseName("IX_Grupos_Escuela_Ciclo_Activo");

                    b.HasIndex("GradoId", "CicloEscolar", "Activo")
                        .HasDatabaseName("IX_Grupos_Grado_Ciclo_Activo");

                    b.HasIndex("EscuelaId", "GradoId", "Nombre", "CicloEscolar")
                        .IsUnique()
                        .HasDatabaseName("IX_Grupos_Escuela_Grado_Nombre_Ciclo_Unique");

                    b.ToTable("Grupos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Grupos_CapacidadMaxima", "`CapacidadMaxima` > 0");

                            t.HasCheckConstraint("CK_Grupos_Horarios", "`HoraInicio` IS NULL OR `HoraFin` IS NULL OR `HoraInicio` < `HoraFin`");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.GrupoMateriaMaestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CicloEscolar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int?>("GrupoId1")
                        .HasColumnType("int");

                    b.Property<string>("Horario")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaestroId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CicloEscolar")
                        .HasDatabaseName("IX_GrupoMateriaMaestros_CicloEscolar");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_GrupoMateriaMaestros_EscuelaId");

                    b.HasIndex("GrupoId")
                        .HasDatabaseName("IX_GrupoMateriaMaestros_GrupoId");

                    b.HasIndex("GrupoId1");

                    b.HasIndex("MaestroId")
                        .HasDatabaseName("IX_GrupoMateriaMaestros_MaestroId");

                    b.HasIndex("MateriaId")
                        .HasDatabaseName("IX_GrupoMateriaMaestros_MateriaId");

                    b.HasIndex("GrupoId", "CicloEscolar")
                        .HasDatabaseName("IX_GrupoMateriaMaestros_Grupo_Ciclo");

                    b.HasIndex("MaestroId", "CicloEscolar")
                        .HasDatabaseName("IX_GrupoMateriaMaestros_Maestro_Ciclo");

                    b.HasIndex("EscuelaId", "GrupoId", "MateriaId", "CicloEscolar")
                        .IsUnique()
                        .HasDatabaseName("IX_GrupoMateriaMaestros_Escuela_Grupo_Materia_Ciclo_Unique");

                    b.ToTable("GrupoMateriaMaestros", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Inscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<bool?>("Aprobado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Becado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("CicloEscolar")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DiasAsistidos")
                        .HasColumnType("int");

                    b.Property<int?>("DiasFaltados")
                        .HasColumnType("int");

                    b.Property<int?>("DiasRetardo")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Inscrito");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaCambioGrupo")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GrupoAnteriorId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LugarEnGrupo")
                        .HasColumnType("int");

                    b.Property<int?>("MateriasReprobadas")
                        .HasColumnType("int");

                    b.Property<string>("MotivoBaja")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MotivoCambioGrupo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("NumeroLista")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<decimal?>("PorcentajeAsistencia")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PorcentajeBeca")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PromedioAcumulado")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PromedioFinal")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("Repetidor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("TipoBeca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TotalDiasClase")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_Inscripciones_AlumnoId");

                    b.HasIndex("Becado")
                        .HasDatabaseName("IX_Inscripciones_Becado");

                    b.HasIndex("CicloEscolar")
                        .HasDatabaseName("IX_Inscripciones_CicloEscolar");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Inscripciones_EscuelaId");

                    b.HasIndex("Estatus")
                        .HasDatabaseName("IX_Inscripciones_Estatus");

                    b.HasIndex("FechaInscripcion")
                        .HasDatabaseName("IX_Inscripciones_FechaInscripcion");

                    b.HasIndex("GrupoId")
                        .HasDatabaseName("IX_Inscripciones_GrupoId");

                    b.HasIndex("AlumnoId", "CicloEscolar")
                        .HasDatabaseName("IX_Inscripciones_Alumno_Ciclo");

                    b.HasIndex("GrupoId", "NumeroLista")
                        .HasDatabaseName("IX_Inscripciones_Grupo_NumeroLista");

                    b.HasIndex("AlumnoId", "GrupoId", "CicloEscolar")
                        .IsUnique()
                        .HasDatabaseName("IX_Inscripciones_Alumno_Grupo_Ciclo_Unique");

                    b.HasIndex("EscuelaId", "CicloEscolar", "Estatus")
                        .HasDatabaseName("IX_Inscripciones_Escuela_Ciclo_Estatus");

                    b.HasIndex("GrupoId", "CicloEscolar", "Estatus")
                        .HasDatabaseName("IX_Inscripciones_Grupo_Ciclo_Estatus");

                    b.ToTable("Inscripciones", null, t =>
                        {
                            t.HasCheckConstraint("CK_Inscripciones_Asistencias", "(`TotalDiasClase` IS NULL OR `TotalDiasClase` >= 0) AND (`DiasAsistidos` IS NULL OR `DiasAsistidos` >= 0) AND (`DiasFaltados` IS NULL OR `DiasFaltados` >= 0) AND (`DiasRetardo` IS NULL OR `DiasRetardo` >= 0)");

                            t.HasCheckConstraint("CK_Inscripciones_Fechas", "`FechaInicio` IS NULL OR `FechaFin` IS NULL OR `FechaInicio` <= `FechaFin`");

                            t.HasCheckConstraint("CK_Inscripciones_LugarEnGrupo", "`LugarEnGrupo` IS NULL OR `LugarEnGrupo` > 0");

                            t.HasCheckConstraint("CK_Inscripciones_MateriasReprobadas", "`MateriasReprobadas` IS NULL OR `MateriasReprobadas` >= 0");

                            t.HasCheckConstraint("CK_Inscripciones_NumeroLista", "`NumeroLista` IS NULL OR `NumeroLista` > 0");

                            t.HasCheckConstraint("CK_Inscripciones_PorcentajeAsistencia", "`PorcentajeAsistencia` IS NULL OR (`PorcentajeAsistencia` >= 0 AND `PorcentajeAsistencia` <= 100)");

                            t.HasCheckConstraint("CK_Inscripciones_PorcentajeBeca", "`PorcentajeBeca` IS NULL OR (`PorcentajeBeca` >= 0 AND `PorcentajeBeca` <= 100)");

                            t.HasCheckConstraint("CK_Inscripciones_PromedioAcumulado", "`PromedioAcumulado` IS NULL OR (`PromedioAcumulado` >= 0 AND `PromedioAcumulado` <= 10)");

                            t.HasCheckConstraint("CK_Inscripciones_PromedioFinal", "`PromedioFinal` IS NULL OR (`PromedioFinal` >= 0 AND `PromedioFinal` <= 10)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Maestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AñoGraduacion")
                        .HasColumnType("int");

                    b.Property<int?>("AñosExperiencia")
                        .HasColumnType("int");

                    b.Property<string>("Capacitaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("CedulaProfesional")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Certificaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DisponibleExtracurriculares")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Activo");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HorarioAtencion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Idiomas")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NumeroEmpleado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<decimal?>("Salario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoContrato")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TituloAcademico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Universidad")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CedulaProfesional")
                        .HasDatabaseName("IX_Maestros_CedulaProfesional");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Maestros_EscuelaId");

                    b.HasIndex("Especialidad")
                        .HasDatabaseName("IX_Maestros_Especialidad");

                    b.HasIndex("Estatus")
                        .HasDatabaseName("IX_Maestros_Estatus");

                    b.HasIndex("NumeroEmpleado")
                        .HasDatabaseName("IX_Maestros_NumeroEmpleado");

                    b.HasIndex("UsuarioId")
                        .IsUnique()
                        .HasDatabaseName("IX_Maestros_UsuarioId");

                    b.HasIndex("EscuelaId", "Estatus")
                        .HasDatabaseName("IX_Maestros_Escuela_Estatus");

                    b.HasIndex("EscuelaId", "NumeroEmpleado")
                        .IsUnique()
                        .HasDatabaseName("IX_Maestros_Escuela_NumeroEmpleado_Unique");

                    b.HasIndex("EscuelaId", "UsuarioId")
                        .IsUnique()
                        .HasDatabaseName("IX_Maestros_Escuela_Usuario_Unique");

                    b.ToTable("Maestros", null, t =>
                        {
                            t.HasCheckConstraint("CK_Maestros_AñoGraduacion", "`AñoGraduacion` IS NULL OR (`AñoGraduacion` >= 1900 AND (`AñoGraduacion` <= 2100)");

                            t.HasCheckConstraint("CK_Maestros_AñosExperiencia", "`AñosExperiencia` IS NULL OR `AñosExperiencia` >= 0");

                            t.HasCheckConstraint("CK_Maestros_Fechas", "`FechaBaja` IS NULL OR `FechaIngreso` IS NULL OR (`FechaBaja` >= `FechaIngreso`");

                            t.HasCheckConstraint("CK_Maestros_Salario", "`Salario` IS NULL OR `Salario` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Bibliografia")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("Competencias")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ContenidoTematico")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int?>("EscuelaId1")
                        .HasColumnType("int");

                    b.Property<string>("InstalacionesRequeridas")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MaterialesRequeridos")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("NivelDificultad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Objetivos")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("RequiereInstalacionesEspeciales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiereMateriales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Materias_Activo");

                    b.HasIndex("Area")
                        .HasDatabaseName("IX_Materias_Area");

                    b.HasIndex("Clave")
                        .HasDatabaseName("IX_Materias_Clave");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Materias_EscuelaId");

                    b.HasIndex("EscuelaId1");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_Materias_Nombre");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Materias_Tipo");

                    b.HasIndex("EscuelaId", "Activo")
                        .HasDatabaseName("IX_Materias_Escuela_Activo");

                    b.HasIndex("EscuelaId", "Clave")
                        .IsUnique()
                        .HasDatabaseName("IX_Materias_Escuela_Clave_Unique");

                    b.HasIndex("EscuelaId", "Area", "Activo")
                        .HasDatabaseName("IX_Materias_Escuela_Area_Activo");

                    b.ToTable("Materias", null, t =>
                        {
                            t.HasCheckConstraint("CK_Materias_NivelDificultad", "`NivelDificultad` IS NULL OR (`NivelDificultad` >= 1 AND `NivelDificultad` <= 5)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.NivelEducativo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("DuracionAños")
                        .HasColumnType("int");

                    b.Property<int?>("EdadMaxima")
                        .HasColumnType("int");

                    b.Property<int?>("EdadMinima")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int?>("EscuelaId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_NivelesEducativos_Activo");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_NivelesEducativos_EscuelaId");

                    b.HasIndex("EscuelaId1");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_NivelesEducativos_Nombre");

                    b.HasIndex("Orden")
                        .HasDatabaseName("IX_NivelesEducativos_Orden");

                    b.HasIndex("EscuelaId", "Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_NivelesEducativos_Escuela_Nombre_Unique");

                    b.HasIndex("EscuelaId", "Activo", "Orden")
                        .HasDatabaseName("IX_NivelesEducativos_Escuela_Activo_Orden");

                    b.ToTable("NivelesEducativos", null, t =>
                        {
                            t.HasCheckConstraint("CK_NivelesEducativos_DuracionAños", "`DuracionAños` IS NULL OR `DuracionAños` > 0");

                            t.HasCheckConstraint("CK_NivelesEducativos_EdadMaxima", "`EdadMaxima` IS NULL OR `EdadMaxima` >= 0");

                            t.HasCheckConstraint("CK_NivelesEducativos_EdadMinima", "`EdadMinima` IS NULL OR `EdadMinima` >= 0");

                            t.HasCheckConstraint("CK_NivelesEducativos_Edades", "`EdadMinima` IS NULL OR `EdadMaxima` IS NULL OR `EdadMinima` <= `EdadMaxima`");

                            t.HasCheckConstraint("CK_NivelesEducativos_Orden", "`Orden` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Padre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AceptaEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("AceptaPush")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("AceptaSMS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Carrera")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DireccionTrabajo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LugarTrabajo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NivelEstudios")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Ocupacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Puesto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TelefonoTrabajo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Padres_EscuelaId");

                    b.HasIndex("NivelEstudios")
                        .HasDatabaseName("IX_Padres_NivelEstudios");

                    b.HasIndex("Ocupacion")
                        .HasDatabaseName("IX_Padres_Ocupacion");

                    b.HasIndex("UsuarioId")
                        .IsUnique()
                        .HasDatabaseName("IX_Padres_UsuarioId");

                    b.HasIndex("EscuelaId", "AceptaEmail")
                        .HasDatabaseName("IX_Padres_Escuela_AceptaEmail");

                    b.HasIndex("EscuelaId", "AceptaPush")
                        .HasDatabaseName("IX_Padres_Escuela_AceptaPush");

                    b.HasIndex("EscuelaId", "AceptaSMS")
                        .HasDatabaseName("IX_Padres_Escuela_AceptaSMS");

                    b.HasIndex("EscuelaId", "UsuarioId")
                        .IsUnique()
                        .HasDatabaseName("IX_Padres_Escuela_Usuario_Unique");

                    b.ToTable("Padres", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Auditoria.CambioEntidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EntidadId")
                        .HasColumnType("int");

                    b.Property<bool>("EsCampoSensible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Etiquetas")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("FechaCambio")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LogAuditoriaId")
                        .HasColumnType("int");

                    b.Property<string>("NombreCampo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreDescriptivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreEntidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("TipoDato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("ValorAnterior")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ValorAnteriorFormateado")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ValorNuevo")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ValorNuevoFormateado")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EntidadId")
                        .HasDatabaseName("IX_CambiosEntidad_EntidadId");

                    b.HasIndex("EsCampoSensible")
                        .HasDatabaseName("IX_CambiosEntidad_EsCampoSensible");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_CambiosEntidad_EscuelaId");

                    b.HasIndex("FechaCambio")
                        .HasDatabaseName("IX_CambiosEntidad_FechaCambio");

                    b.HasIndex("LogAuditoriaId")
                        .HasDatabaseName("IX_CambiosEntidad_LogAuditoriaId");

                    b.HasIndex("NombreCampo")
                        .HasDatabaseName("IX_CambiosEntidad_NombreCampo");

                    b.HasIndex("NombreEntidad")
                        .HasDatabaseName("IX_CambiosEntidad_NombreEntidad");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_CambiosEntidad_UsuarioId");

                    b.HasIndex("NombreEntidad", "EntidadId")
                        .HasDatabaseName("IX_CambiosEntidad_Entidad_EntidadId");

                    b.HasIndex("NombreEntidad", "EntidadId", "FechaCambio")
                        .HasDatabaseName("IX_CambiosEntidad_Entidad_EntidadId_Fecha");

                    b.HasIndex("NombreEntidad", "NombreCampo", "FechaCambio")
                        .HasDatabaseName("IX_CambiosEntidad_Entidad_Campo_Fecha");

                    b.ToTable("CambiosEntidad", null, t =>
                        {
                            t.HasCheckConstraint("CK_CambiosEntidad_EntidadId", "`EntidadId` > 0");

                            t.HasCheckConstraint("CK_CambiosEntidad_FechaCambio", "`FechaCambio` <= GETDATE()");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Auditoria.LogAuditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CamposModificados")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CodigoResultado")
                        .HasColumnType("int");

                    b.Property<string>("Controlador")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DatosAdicionales")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("DireccionIP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Dispositivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DuracionMs")
                        .HasColumnType("int");

                    b.Property<string>("EmailUsuario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EntidadAfectada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EntidadAfectadaId")
                        .HasColumnType("int");

                    b.Property<int?>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<bool>("Exitoso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Funcionalidad")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MensajeError")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Navegador")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Severidad")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SistemaOperativo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TipoAccion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TipoEntidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("ValoresAnteriores")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ValoresNuevos")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.HasKey("Id");

                    b.HasIndex("DireccionIP")
                        .HasDatabaseName("IX_LogsAuditoria_DireccionIP");

                    b.HasIndex("EntidadAfectada")
                        .HasDatabaseName("IX_LogsAuditoria_EntidadAfectada");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_LogsAuditoria_EscuelaId");

                    b.HasIndex("Exitoso")
                        .HasDatabaseName("IX_LogsAuditoria_Exitoso");

                    b.HasIndex("FechaHora")
                        .HasDatabaseName("IX_LogsAuditoria_FechaHora");

                    b.HasIndex("Modulo")
                        .HasDatabaseName("IX_LogsAuditoria_Modulo");

                    b.HasIndex("Severidad")
                        .HasDatabaseName("IX_LogsAuditoria_Severidad");

                    b.HasIndex("TipoAccion")
                        .HasDatabaseName("IX_LogsAuditoria_TipoAccion");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_LogsAuditoria_UsuarioId");

                    b.HasIndex("EntidadAfectada", "EntidadAfectadaId")
                        .HasDatabaseName("IX_LogsAuditoria_Entidad_EntidadId");

                    b.HasIndex("EscuelaId", "FechaHora")
                        .HasDatabaseName("IX_LogsAuditoria_Escuela_Fecha");

                    b.HasIndex("Exitoso", "FechaHora")
                        .HasDatabaseName("IX_LogsAuditoria_Exitoso_Fecha");

                    b.HasIndex("TipoAccion", "FechaHora")
                        .HasDatabaseName("IX_LogsAuditoria_TipoAccion_Fecha");

                    b.HasIndex("UsuarioId", "FechaHora")
                        .HasDatabaseName("IX_LogsAuditoria_Usuario_Fecha");

                    b.HasIndex("EscuelaId", "TipoAccion", "FechaHora")
                        .HasDatabaseName("IX_LogsAuditoria_Escuela_Tipo_Fecha");

                    b.ToTable("LogsAuditoria", null, t =>
                        {
                            t.HasCheckConstraint("CK_LogsAuditoria_CodigoResultado", "`CodigoResultado` IS NULL OR (`CodigoResultado` >= 100 AND `CodigoResultado` <= 599)");

                            t.HasCheckConstraint("CK_LogsAuditoria_DuracionMs", "`DuracionMs` IS NULL OR `DuracionMs` >= 0");

                            t.HasCheckConstraint("CK_LogsAuditoria_FechaHora", "`FechaHora` <= GETDATE()");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Auditoria.Sincronizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadConflictos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CantidadErrores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DatosAdicionales")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("DetalleConflictos")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("DetalleErrores")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Bidireccional");

                    b.Property<string>("DireccionIP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("DispositivoId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("DuracionMs")
                        .HasColumnType("int");

                    b.Property<string>("EntidadesSincronizadas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pendiente");

                    b.Property<string>("EstrategiaResolucion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HashCliente")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HashVerificacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MensajeError")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ModoSincronizacion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Incremental");

                    b.Property<string>("NombreDispositivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("Prioridad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("RegistrosActualizados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RegistrosCreados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RegistrosEliminados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RegistrosSinCambios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Reintentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SistemaOperativo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<long?>("TamanioDatos")
                        .HasColumnType("bigint");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Manual");

                    b.Property<string>("TipoDispositivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalEntidades")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("TuvoErrores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UltimaSincronizacionExitosa")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<bool?>("VerificacionExitosa")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("VersionCliente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DispositivoId")
                        .HasDatabaseName("IX_Sincronizaciones_DispositivoId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Sincronizaciones_EscuelaId");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_Sincronizaciones_Estado");

                    b.HasIndex("FechaFin")
                        .HasDatabaseName("IX_Sincronizaciones_FechaFin");

                    b.HasIndex("FechaInicio")
                        .HasDatabaseName("IX_Sincronizaciones_FechaInicio");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Sincronizaciones_Tipo");

                    b.HasIndex("TipoDispositivo")
                        .HasDatabaseName("IX_Sincronizaciones_TipoDispositivo");

                    b.HasIndex("TuvoErrores")
                        .HasDatabaseName("IX_Sincronizaciones_TuvoErrores");

                    b.HasIndex("UltimaSincronizacionExitosa")
                        .HasDatabaseName("IX_Sincronizaciones_UltimaSincronizacionExitosa");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_Sincronizaciones_UsuarioId");

                    b.HasIndex("DispositivoId", "Estado")
                        .HasDatabaseName("IX_Sincronizaciones_Dispositivo_Estado");

                    b.HasIndex("DispositivoId", "FechaInicio")
                        .HasDatabaseName("IX_Sincronizaciones_Dispositivo_Fecha");

                    b.HasIndex("Estado", "FechaInicio")
                        .HasDatabaseName("IX_Sincronizaciones_Estado_Fecha");

                    b.HasIndex("EscuelaId", "Estado", "FechaInicio")
                        .HasDatabaseName("IX_Sincronizaciones_Escuela_Estado_Fecha");

                    b.ToTable("Sincronizaciones", null, t =>
                        {
                            t.HasCheckConstraint("CK_Sincronizaciones_Contadores", "`RegistrosCreados` >= 0 AND `RegistrosActualizados` >= 0 AND `RegistrosEliminados` >= 0 AND `RegistrosSinCambios` >= 0");

                            t.HasCheckConstraint("CK_Sincronizaciones_DuracionMs", "`DuracionMs` IS NULL OR `DuracionMs` >= 0");

                            t.HasCheckConstraint("CK_Sincronizaciones_Errores", "`CantidadErrores` >= 0 AND `CantidadConflictos` >= 0");

                            t.HasCheckConstraint("CK_Sincronizaciones_FechaFin", "`FechaFin` IS NULL OR `FechaFin` >= `FechaInicio`");

                            t.HasCheckConstraint("CK_Sincronizaciones_Prioridad", "`Prioridad` >= 1 AND `Prioridad` <= 10");

                            t.HasCheckConstraint("CK_Sincronizaciones_Reintentos", "`Reintentos` >= 0");

                            t.HasCheckConstraint("CK_Sincronizaciones_TamanioDatos", "`TamanioDatos` IS NULL OR `TamanioDatos` >= 0");

                            t.HasCheckConstraint("CK_Sincronizaciones_TotalEntidades", "`TotalEntidades` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Biblioteca.CategoriaRecurso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("CantidadRecursos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_CategoriasRecurso_Activo");

                    b.HasIndex("Codigo")
                        .HasDatabaseName("IX_CategoriasRecurso_Codigo");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_CategoriasRecurso_EscuelaId");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_CategoriasRecurso_Nombre");

                    b.HasIndex("EscuelaId", "Activo", "Orden")
                        .HasDatabaseName("IX_CategoriasRecurso_Escuela_Activo_Orden");

                    b.ToTable("CategoriasRecurso", null, t =>
                        {
                            t.HasCheckConstraint("CK_CategoriasRecurso_CantidadRecursos", "`CantidadRecursos` >= 0");

                            t.HasCheckConstraint("CK_CategoriasRecurso_Orden", "`Orden` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Biblioteca.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("AnioPublicacion")
                        .HasColumnType("int");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("CalificacionPromedio")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("CantidadDaniada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CantidadDisponible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CantidadExtraviada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CantidadPrestada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CantidadTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoClasificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("DisponiblePrestamo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Edicion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Editorial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Disponible");

                    b.Property<string>("Estante")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaAdquisicion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Español");

                    b.Property<string>("ImagenPortadaUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("NumeroPaginas")
                        .HasColumnType("int");

                    b.Property<int>("Popularidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("PrecioAdquisicion")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Proveedor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecursoDigitalUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("VecesPrestado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Libros_Activo");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("IX_Libros_CategoriaId");

                    b.HasIndex("CodigoClasificacion")
                        .HasDatabaseName("IX_Libros_CodigoClasificacion");

                    b.HasIndex("DisponiblePrestamo")
                        .HasDatabaseName("IX_Libros_DisponiblePrestamo");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Libros_EscuelaId");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_Libros_Estado");

                    b.HasIndex("ISBN")
                        .HasDatabaseName("IX_Libros_ISBN");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Libros_Tipo");

                    b.HasIndex("Titulo")
                        .HasDatabaseName("IX_Libros_Titulo");

                    b.HasIndex("EscuelaId", "Activo", "Estado")
                        .HasDatabaseName("IX_Libros_Escuela_Activo_Estado");

                    b.ToTable("Libros", null, t =>
                        {
                            t.HasCheckConstraint("CK_Libros_AnioPublicacion", "`AnioPublicacion` IS NULL OR (`AnioPublicacion` >= 1000 AND `AnioPublicacion` <= 2100 + 1)");

                            t.HasCheckConstraint("CK_Libros_CalificacionPromedio", "`CalificacionPromedio` IS NULL OR (`CalificacionPromedio` >= 1 AND `CalificacionPromedio` <= 5)");

                            t.HasCheckConstraint("CK_Libros_CantidadDisponible", "`CantidadDisponible` >= 0");

                            t.HasCheckConstraint("CK_Libros_CantidadPrestada", "`CantidadPrestada` >= 0");

                            t.HasCheckConstraint("CK_Libros_CantidadTotal", "`CantidadTotal` >= 0");

                            t.HasCheckConstraint("CK_Libros_CantidadesInventario", "`CantidadDisponible` + `CantidadPrestada` + `CantidadExtraviada` + `CantidadDaniada` = `CantidadTotal`");

                            t.HasCheckConstraint("CK_Libros_PrecioAdquisicion", "`PrecioAdquisicion` IS NULL OR `PrecioAdquisicion` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Biblioteca.Prestamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int>("CantidadRenovaciones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CondicionDevolucion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DevueltoPorId")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Activo");

                    b.Property<DateTime>("FechaDevolucionProgramada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaDevolucionReal")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaPagoMulta")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaPrestamo")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaReporteExtravio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimaRenovacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LibroId")
                        .HasColumnType("int");

                    b.Property<int?>("MaestroId")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoMulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("MultaPagada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ObservacionesDevolucion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("PrestamoUrgente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("RegistradoPorId")
                        .HasColumnType("int");

                    b.Property<bool>("ReportadoDaniado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("ReportadoExtraviado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_Prestamos_AlumnoId");

                    b.HasIndex("DevueltoPorId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Prestamos_EscuelaId");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_Prestamos_Estado");

                    b.HasIndex("FechaDevolucionProgramada")
                        .HasDatabaseName("IX_Prestamos_FechaDevolucionProgramada");

                    b.HasIndex("FechaPrestamo")
                        .HasDatabaseName("IX_Prestamos_FechaPrestamo");

                    b.HasIndex("Folio")
                        .HasDatabaseName("IX_Prestamos_Folio");

                    b.HasIndex("LibroId")
                        .HasDatabaseName("IX_Prestamos_LibroId");

                    b.HasIndex("MaestroId")
                        .HasDatabaseName("IX_Prestamos_MaestroId");

                    b.HasIndex("MultaPagada")
                        .HasDatabaseName("IX_Prestamos_MultaPagada");

                    b.HasIndex("RegistradoPorId");

                    b.HasIndex("AlumnoId", "Estado")
                        .HasDatabaseName("IX_Prestamos_Alumno_Estado");

                    b.HasIndex("Estado", "FechaDevolucionProgramada")
                        .HasDatabaseName("IX_Prestamos_Estado_FechaDevolucion");

                    b.HasIndex("EscuelaId", "Estado", "FechaPrestamo")
                        .HasDatabaseName("IX_Prestamos_Escuela_Estado_Fecha");

                    b.ToTable("Prestamos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Prestamos_CantidadRenovaciones", "`CantidadRenovaciones` >= 0");

                            t.HasCheckConstraint("CK_Prestamos_FechaDevolucionProgramada", "`FechaDevolucionProgramada` > `FechaPrestamo`");

                            t.HasCheckConstraint("CK_Prestamos_FechaDevolucionReal", "`FechaDevolucionReal` IS NULL OR `FechaDevolucionReal` >= `FechaPrestamo`");

                            t.HasCheckConstraint("CK_Prestamos_MontoMulta", "`MontoMulta` >= 0");

                            t.HasCheckConstraint("CK_Prestamos_SolicitanteUnico", "(`AlumnoId` IS NOT NULL AND `MaestroId` IS NULL) OR (`AlumnoId` IS NULL AND `MaestroId` IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Calendario.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("AplicaATodos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("ArchivoAdjuntoNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ArchivoAdjuntoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ConfiguracionRecurrencia")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("CreadoPorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("EsRecurrente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaEnvioRecordatorios")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GruposAfectadosJson")
                        .IsRequired()
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("GruposAfectados");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Normal");

                    b.Property<int?>("RecordatorioMinutos")
                        .HasColumnType("int");

                    b.Property<bool>("RecordatoriosEnviados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("TodoElDia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPorId")
                        .HasDatabaseName("IX_Eventos_CreadoPorId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Eventos_EscuelaId");

                    b.HasIndex("FechaInicio")
                        .HasDatabaseName("IX_Eventos_FechaInicio");

                    b.HasIndex("Prioridad")
                        .HasDatabaseName("IX_Eventos_Prioridad");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Eventos_Tipo");

                    b.HasIndex("FechaInicio", "FechaFin")
                        .HasDatabaseName("IX_Eventos_FechaInicio_FechaFin");

                    b.HasIndex("RecordatoriosEnviados", "FechaInicio")
                        .HasDatabaseName("IX_Eventos_Recordatorios_Fecha");

                    b.HasIndex("EscuelaId", "FechaInicio", "Activo")
                        .HasDatabaseName("IX_Eventos_Escuela_Fecha_Activo");

                    b.ToTable("Eventos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Eventos_Fechas", "`FechaFin` IS NULL OR `FechaFin` >= `FechaInicio`");

                            t.HasCheckConstraint("CK_Eventos_RecordatorioMinutos", "`RecordatorioMinutos` IS NULL OR `RecordatorioMinutos` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.Comunicado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("ArchivoAdjuntoNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<long?>("ArchivoAdjuntoTamano")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchivoAdjuntoTipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ArchivoAdjuntoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Destinatarios")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PermiteComentarios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Normal");

                    b.Property<int>("PublicadoPorId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiereConfirmacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TotalConfirmaciones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalDestinatarios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalLecturas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Comunicados_Activo");

                    b.HasIndex("Destinatarios")
                        .HasDatabaseName("IX_Comunicados_Destinatarios");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Comunicados_EscuelaId");

                    b.HasIndex("FechaPublicacion")
                        .HasDatabaseName("IX_Comunicados_FechaPublicacion");

                    b.HasIndex("GrupoId")
                        .HasDatabaseName("IX_Comunicados_GrupoId");

                    b.HasIndex("PublicadoPorId");

                    b.HasIndex("EscuelaId", "Activo", "FechaPublicacion")
                        .HasDatabaseName("IX_Comunicados_Escuela_Activo_Fecha");

                    b.ToTable("Comunicados", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.ComunicadoLectura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("ComunicadoId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("FechaConfirmacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaLectura")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComunicadoId")
                        .HasDatabaseName("IX_ComunicadoLecturas_ComunicadoId");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_ComunicadoLecturas_UsuarioId");

                    b.HasIndex("ComunicadoId", "Confirmado")
                        .HasDatabaseName("IX_ComunicadoLecturas_Comunicado_Confirmado");

                    b.HasIndex("ComunicadoId", "UsuarioId")
                        .IsUnique()
                        .HasDatabaseName("IX_ComunicadoLecturas_Comunicado_Usuario_Unique");

                    b.ToTable("ComunicadoLecturas", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.Mensaje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AlumnoRelacionadoId")
                        .HasColumnType("int");

                    b.Property<bool>("Archivado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("ArchivoAdjuntoNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<long?>("ArchivoAdjuntoTamano")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchivoAdjuntoTipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ArchivoAdjuntoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("EliminadoPorEmisor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EliminadoPorReceptor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("EmisorId")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaLectura")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Importante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Leido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("MensajePadreId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoRelacionadoId")
                        .HasDatabaseName("IX_Mensajes_AlumnoRelacionadoId");

                    b.HasIndex("EmisorId")
                        .HasDatabaseName("IX_Mensajes_EmisorId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Mensajes_EscuelaId");

                    b.HasIndex("FechaEnvio")
                        .HasDatabaseName("IX_Mensajes_FechaEnvio");

                    b.HasIndex("MensajePadreId")
                        .HasDatabaseName("IX_Mensajes_MensajePadreId");

                    b.HasIndex("ReceptorId", "Leido")
                        .HasDatabaseName("IX_Mensajes_Receptor_Leido");

                    b.HasIndex("EmisorId", "ReceptorId", "FechaEnvio")
                        .HasDatabaseName("IX_Mensajes_Emisor_Receptor_Fecha");

                    b.ToTable("Mensajes", null, t =>
                        {
                            t.HasCheckConstraint("CK_Mensajes_Emisor_Receptor", "`EmisorId` <> `ReceptorId`");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Canal")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Sistema");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EnviadoPorId")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaLectura")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaProgramada")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Leida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Normal");

                    b.Property<bool>("ReproducirSonido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UrlAccion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("UsuarioDestinatarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnviadoPorId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Notificaciones_EscuelaId");

                    b.HasIndex("FechaEnvio")
                        .HasDatabaseName("IX_Notificaciones_FechaEnvio");

                    b.HasIndex("FechaProgramada")
                        .HasDatabaseName("IX_Notificaciones_FechaProgramada");

                    b.HasIndex("Prioridad")
                        .HasDatabaseName("IX_Notificaciones_Prioridad");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Notificaciones_Tipo");

                    b.HasIndex("UsuarioDestinatarioId", "FechaEnvio")
                        .HasDatabaseName("IX_Notificaciones_Usuario_Fecha");

                    b.HasIndex("UsuarioDestinatarioId", "Leida")
                        .HasDatabaseName("IX_Notificaciones_Usuario_Leida");

                    b.ToTable("Notificaciones", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.NotificacionSmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodigoError")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Costo")
                        .HasColumnType("decimal(10,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorMensaje")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Pendiente");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimoIntento")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("MXN");

                    b.Property<int>("NotificacionId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroIntentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Proveedor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SidProveedor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Estatus")
                        .HasDatabaseName("IX_NotificacionSmsLog_Estatus");

                    b.HasIndex("FechaEnvio")
                        .HasDatabaseName("IX_NotificacionSmsLog_FechaEnvio");

                    b.HasIndex("NotificacionId")
                        .HasDatabaseName("IX_NotificacionSmsLog_NotificacionId");

                    b.HasIndex("Telefono")
                        .HasDatabaseName("IX_NotificacionSmsLog_Telefono");

                    b.HasIndex("Estatus", "FechaUltimoIntento")
                        .HasDatabaseName("IX_NotificacionSmsLog_Estatus_FechaIntento");

                    b.ToTable("NotificacionSmsLog", null, t =>
                        {
                            t.HasCheckConstraint("CK_NotificacionSmsLog_NumeroIntentos", "`NumeroIntentos` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.AlumnoInsignia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoPuntosId")
                        .HasColumnType("int");

                    b.Property<int>("AlumnoPuntosId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EsFavorita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("FechaObtencion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InsigniaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VecesObtenida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("AlumnoPuntosId")
                        .HasDatabaseName("IX_AlumnosInsignias_AlumnoPuntosId");

                    b.HasIndex("AlumnoPuntosId1");

                    b.HasIndex("EsFavorita")
                        .HasDatabaseName("IX_AlumnosInsignias_EsFavorita");

                    b.HasIndex("FechaObtencion")
                        .HasDatabaseName("IX_AlumnosInsignias_FechaObtencion");

                    b.HasIndex("InsigniaId")
                        .HasDatabaseName("IX_AlumnosInsignias_InsigniaId");

                    b.HasIndex("AlumnoPuntosId", "EsFavorita")
                        .HasDatabaseName("IX_AlumnosInsignias_AlumnoPuntos_Favorita");

                    b.HasIndex("AlumnoPuntosId", "FechaObtencion")
                        .HasDatabaseName("IX_AlumnosInsignias_AlumnoPuntos_Fecha");

                    b.HasIndex("AlumnoPuntosId", "InsigniaId")
                        .HasDatabaseName("IX_AlumnosInsignias_AlumnoPuntos_Insignia");

                    b.HasIndex("InsigniaId", "FechaObtencion")
                        .HasDatabaseName("IX_AlumnosInsignias_Insignia_Fecha");

                    b.ToTable("AlumnosInsignias", null, t =>
                        {
                            t.HasCheckConstraint("CK_AlumnosInsignias_FechaObtencion", "`FechaObtencion` <= GETDATE()");

                            t.HasCheckConstraint("CK_AlumnosInsignias_VecesObtenida", "`VecesObtenida` >= 1");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.AlumnoPuntos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int?>("AlumnoId1")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("CambioRanking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CicloEscolar")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ColorNivel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("#4CAF50");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienciaActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ExperienciaSiguienteNivel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<DateTime?>("FechaReinicioPeriodo")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimoLogro")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimoNivel")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lema")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MejorRachaAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MejorRachaConducta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MejorRachaTareas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("MostrarEnRankings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("NivelActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("NotificacionesActivas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("PeriodoEscolarId")
                        .HasColumnType("int");

                    b.Property<decimal>("PorcentajeMejora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PromedioPuntosDiario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PromedioPuntosSemanal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("PuntosAcademicos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntosAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntosConducta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntosCulturales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntosDeportivos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntosExtra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntosPeriodoActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntosSociales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PuntosTotales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RachaAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RachaBuenaConducta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RachaTareas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("RankingEscuela")
                        .HasColumnType("int");

                    b.Property<int?>("RankingGrado")
                        .HasColumnType("int");

                    b.Property<int?>("RankingGrupo")
                        .HasColumnType("int");

                    b.Property<string>("Tendencia")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Estable");

                    b.Property<string>("TituloNivel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Principiante");

                    b.Property<int?>("TotalAlumnosEscuela")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAlumnosGrado")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAlumnosGrupo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimaActualizacionPuntos")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_AlumnoPuntos_AlumnoId");

                    b.HasIndex("AlumnoId1");

                    b.HasIndex("CicloEscolar")
                        .HasDatabaseName("IX_AlumnoPuntos_CicloEscolar");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_AlumnoPuntos_EscuelaId");

                    b.HasIndex("NivelActual")
                        .HasDatabaseName("IX_AlumnoPuntos_NivelActual");

                    b.HasIndex("PeriodoEscolarId")
                        .HasDatabaseName("IX_AlumnoPuntos_PeriodoEscolarId");

                    b.HasIndex("PuntosTotales")
                        .HasDatabaseName("IX_AlumnoPuntos_PuntosTotales");

                    b.HasIndex("RankingEscuela")
                        .HasDatabaseName("IX_AlumnoPuntos_RankingEscuela");

                    b.HasIndex("RankingGrado")
                        .HasDatabaseName("IX_AlumnoPuntos_RankingGrado");

                    b.HasIndex("RankingGrupo")
                        .HasDatabaseName("IX_AlumnoPuntos_RankingGrupo");

                    b.HasIndex("AlumnoId", "CicloEscolar")
                        .IsUnique()
                        .HasDatabaseName("IX_AlumnoPuntos_Alumno_Ciclo_Unique");

                    b.HasIndex("EscuelaId", "RankingEscuela")
                        .HasDatabaseName("IX_AlumnoPuntos_Escuela_Ranking");

                    b.HasIndex("NivelActual", "PuntosTotales")
                        .HasDatabaseName("IX_AlumnoPuntos_Nivel_Puntos");

                    b.HasIndex("EscuelaId", "CicloEscolar", "PuntosTotales")
                        .HasDatabaseName("IX_AlumnoPuntos_Escuela_Ciclo_Puntos");

                    b.ToTable("AlumnoPuntos", null, t =>
                        {
                            t.HasCheckConstraint("CK_AlumnoPuntos_ExperienciaActual", "`ExperienciaActual` >= 0");

                            t.HasCheckConstraint("CK_AlumnoPuntos_NivelActual", "`NivelActual` >= 1");

                            t.HasCheckConstraint("CK_AlumnoPuntos_Promedios", "`PromedioPuntosDiario` >= 0 AND `PromedioPuntosSemanal` >= 0");

                            t.HasCheckConstraint("CK_AlumnoPuntos_PuntosTotales", "`PuntosTotales` >= 0");

                            t.HasCheckConstraint("CK_AlumnoPuntos_Rachas", "`RachaAsistencia` >= 0 AND `RachaBuenaConducta` >= 0 AND `RachaTareas` >= 0");

                            t.HasCheckConstraint("CK_AlumnoPuntos_Rankings", "(`RankingGrupo` IS NULL OR `RankingGrupo` > 0) AND (`RankingGrado` IS NULL OR `RankingGrado` > 0) AND (`RankingEscuela` IS NULL OR `RankingEscuela` > 0)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.Insignia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Criterios")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("EsRecurrente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PuntosOtorgados")
                        .HasColumnType("int");

                    b.Property<string>("Rareza")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Requisitos")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Insignias_Activo");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Insignias_EscuelaId");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_Insignias_Nombre");

                    b.HasIndex("PuntosOtorgados")
                        .HasDatabaseName("IX_Insignias_PuntosOtorgados");

                    b.HasIndex("Rareza")
                        .HasDatabaseName("IX_Insignias_Rareza");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Insignias_Tipo");

                    b.HasIndex("EscuelaId", "Activo")
                        .HasDatabaseName("IX_Insignias_Escuela_Activo");

                    b.HasIndex("EscuelaId", "Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_Insignias_Escuela_Nombre_Unique");

                    b.HasIndex("Tipo", "Rareza")
                        .HasDatabaseName("IX_Insignias_Tipo_Rareza");

                    b.HasIndex("EscuelaId", "Tipo", "Activo")
                        .HasDatabaseName("IX_Insignias_Escuela_Tipo_Activo");

                    b.ToTable("Insignias", null, t =>
                        {
                            t.HasCheckConstraint("CK_Insignias_PuntosOtorgados", "`PuntosOtorgados` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.RegistroConducta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccionesTomadas")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int?>("AlumnoId1")
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Activo");

                    b.Property<string>("EvidenciaUrls")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("FechaHoraIncidente")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaNotificacionPadres")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaSeguimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gravedad")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Lugar")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("MaestroId")
                        .HasColumnType("int");

                    b.Property<string>("MetodoNotificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NotasSeguimiento")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("PadresNotificados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("PeriodoId")
                        .HasColumnType("int");

                    b.Property<int>("Puntos")
                        .HasColumnType("int");

                    b.Property<bool>("RequiereSeguimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("RespuestaPadres")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("SancionId")
                        .HasColumnType("int");

                    b.Property<string>("Testigos")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_RegistrosConducta_AlumnoId");

                    b.HasIndex("AlumnoId1");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_RegistrosConducta_Categoria");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_RegistrosConducta_EscuelaId");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_RegistrosConducta_Estado");

                    b.HasIndex("FechaHoraIncidente")
                        .HasDatabaseName("IX_RegistrosConducta_FechaHoraIncidente");

                    b.HasIndex("FechaSeguimiento")
                        .HasDatabaseName("IX_RegistrosConducta_FechaSeguimiento");

                    b.HasIndex("Gravedad")
                        .HasDatabaseName("IX_RegistrosConducta_Gravedad");

                    b.HasIndex("GrupoId")
                        .HasDatabaseName("IX_RegistrosConducta_GrupoId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_RegistrosConducta_IsDeleted");

                    b.HasIndex("MaestroId")
                        .HasDatabaseName("IX_RegistrosConducta_MaestroId");

                    b.HasIndex("PadresNotificados")
                        .HasDatabaseName("IX_RegistrosConducta_PadresNotificados");

                    b.HasIndex("PeriodoId")
                        .HasDatabaseName("IX_RegistrosConducta_PeriodoId");

                    b.HasIndex("RequiereSeguimiento")
                        .HasDatabaseName("IX_RegistrosConducta_RequiereSeguimiento");

                    b.HasIndex("SancionId")
                        .IsUnique()
                        .HasDatabaseName("IX_RegistrosConducta_SancionId");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_RegistrosConducta_Tipo");

                    b.HasIndex("AlumnoId", "FechaHoraIncidente")
                        .HasDatabaseName("IX_RegistrosConducta_Alumno_Fecha");

                    b.HasIndex("MaestroId", "FechaHoraIncidente")
                        .HasDatabaseName("IX_RegistrosConducta_Maestro_Fecha");

                    b.HasIndex("RequiereSeguimiento", "FechaSeguimiento")
                        .HasDatabaseName("IX_RegistrosConducta_Seguimiento_Fecha");

                    b.HasIndex("Tipo", "Gravedad")
                        .HasDatabaseName("IX_RegistrosConducta_Tipo_Gravedad");

                    b.HasIndex("AlumnoId", "Tipo", "Estado")
                        .HasDatabaseName("IX_RegistrosConducta_Alumno_Tipo_Estado");

                    b.HasIndex("EscuelaId", "Estado", "IsDeleted")
                        .HasDatabaseName("IX_RegistrosConducta_Escuela_Estado_Deleted");

                    b.ToTable("RegistrosConducta", null, t =>
                        {
                            t.HasCheckConstraint("CK_RegistrosConducta_FechaHoraIncidente", "`FechaHoraIncidente` <= GETDATE()");

                            t.HasCheckConstraint("CK_RegistrosConducta_FechaSeguimiento", "`FechaSeguimiento` IS NULL OR `FechaSeguimiento` >= `FechaHoraIncidente`");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.Sancion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<bool>("Apelada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("AutorizadoPor")
                        .HasColumnType("int");

                    b.Property<int?>("ConductaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("Cumplida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DocumentoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaApelacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaAutorizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaCumplimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("FechaFirmaEnterado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("FechaNotificacionPadres")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaResolucionApelacion")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("FirmaEnterado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedioNotificacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("MotivoApelacion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ObservacionesCumplimiento")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("PadresNotificados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("ResultadoApelacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("VerificadoPor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_Sanciones_AlumnoId");

                    b.HasIndex("Apelada")
                        .HasDatabaseName("IX_Sanciones_Apelada");

                    b.HasIndex("AutorizadoPor")
                        .HasDatabaseName("IX_Sanciones_AutorizadoPor");

                    b.HasIndex("ConductaId")
                        .IsUnique()
                        .HasDatabaseName("IX_Sanciones_ConductaId");

                    b.HasIndex("Cumplida")
                        .HasDatabaseName("IX_Sanciones_Cumplida");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Sanciones_EscuelaId");

                    b.HasIndex("FechaFin")
                        .HasDatabaseName("IX_Sanciones_FechaFin");

                    b.HasIndex("FechaInicio")
                        .HasDatabaseName("IX_Sanciones_FechaInicio");

                    b.HasIndex("FirmaEnterado")
                        .HasDatabaseName("IX_Sanciones_FirmaEnterado");

                    b.HasIndex("PadresNotificados")
                        .HasDatabaseName("IX_Sanciones_PadresNotificados");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Sanciones_Tipo");

                    b.HasIndex("AlumnoId", "FechaInicio")
                        .HasDatabaseName("IX_Sanciones_Alumno_FechaInicio");

                    b.HasIndex("Cumplida", "FechaFin")
                        .HasDatabaseName("IX_Sanciones_Cumplida_FechaFin");

                    b.HasIndex("EscuelaId", "Cumplida")
                        .HasDatabaseName("IX_Sanciones_Escuela_Cumplida");

                    b.HasIndex("PadresNotificados", "FirmaEnterado")
                        .HasDatabaseName("IX_Sanciones_Notificacion_Firma");

                    b.HasIndex("AlumnoId", "Tipo", "Cumplida")
                        .HasDatabaseName("IX_Sanciones_Alumno_Tipo_Cumplida");

                    b.HasIndex("EscuelaId", "FechaInicio", "FechaFin")
                        .HasDatabaseName("IX_Sanciones_Escuela_Fechas");

                    b.ToTable("Sanciones", null, t =>
                        {
                            t.HasCheckConstraint("CK_Sanciones_FechaAutorizacion", "`FechaAutorizacion` <= GETDATE()");

                            t.HasCheckConstraint("CK_Sanciones_FechaCumplimiento", "`FechaCumplimiento` IS NULL OR `FechaCumplimiento` >= `FechaInicio`");

                            t.HasCheckConstraint("CK_Sanciones_Fechas", "`FechaFin` IS NULL OR `FechaFin` >= `FechaInicio`");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Configuracion.ConfiguracionEscuela", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Autenticacion2FactoresHabilitada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<decimal>("CalificacionMaxima")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(10.0m);

                    b.Property<decimal>("CalificacionMinimaAprobatoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(6.0m);

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ColorAcento")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasDefaultValue("#FF9800");

                    b.Property<string>("ColorPrimario")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasDefaultValue("#1976D2");

                    b.Property<string>("ColorSecundario")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasDefaultValue("#424242");

                    b.Property<string>("ConfiguracionSMS")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ConfiguracionSMTP")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DatosAdicionales")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("DecimalesCalificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("DiasToleranciaParaPagos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("DiasVigenciaPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(90);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DuracionClaseMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.Property<int>("DuracionRecesoMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("FechaExpiracionLicencia")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FormatoFecha")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("dd/MM/yyyy");

                    b.Property<string>("FormatoHora")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("HH:mm");

                    b.Property<string>("FormatoPredeterminadoReportes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PDF");

                    b.Property<string>("GoogleApiKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IdiomaPredeterminado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("es-MX");

                    b.Property<string>("ImagenFondoLoginUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IncluirFirmaDigitalEnDocumentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IncluirLogoEnReportes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IntegracionGoogleClassroomHabilitada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IntegracionMicrosoftTeamsHabilitada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IntegracionZoomHabilitada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("IntentosLoginFallidosAntesBloQueo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lema")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("LimiteAlmacenamientoGB")
                        .HasColumnType("int");

                    b.Property<int?>("LimiteAlumnos")
                        .HasColumnType("int");

                    b.Property<int?>("LimiteMaestros")
                        .HasColumnType("int");

                    b.Property<string>("LogoPequenoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("LongitudMinimaPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(8);

                    b.Property<int?>("MaximaMateriasReprobadas")
                        .HasColumnType("int");

                    b.Property<int>("MinutosBloqueoPorIntentosFallidos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<string>("Mision")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("ModuloPagosHabilitado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("MonedaPredeterminada")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("MXN");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreInstitucion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("NotificacionesEmailHabilitadas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("NotificacionesPushHabilitadas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("NotificacionesSMSHabilitadas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("NotificarAsistenciaAutomaticamente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("NotificarCalificacionesAutomaticamente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("NotificarEventosAutomaticamente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("NotificarTareasAutomaticamente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PeriodosPorCiclo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<bool>("PermitePagosEnLinea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("PermiteReprobacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("PlantillaBoletaPredeterminadaId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantillaConstanciaPredeterminadaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PorcentajeMinimoAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(80.0m);

                    b.Property<decimal?>("PorcentajeRecargoMora")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PrimerDiaSemana")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ProveedorPagos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("RequiereCambioPasswordPrimerLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiereCaracteresEspecialesPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiereMayusculasPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiereNumerosPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("SimboloMoneda")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("$");

                    b.Property<string>("SistemaCalificacion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Numerico");

                    b.Property<string>("SitioWeb")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TelefonoAlternativo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TiempoSesionMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(60);

                    b.Property<string>("TipoPlan")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Basic");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Valores")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Vision")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ZonaHoraria")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("America/Mexico_City");

                    b.HasKey("Id");

                    b.HasIndex("EscuelaId")
                        .IsUnique()
                        .HasDatabaseName("IX_ConfiguracionesEscuela_EscuelaId_Unique");

                    b.HasIndex("FechaExpiracionLicencia")
                        .HasDatabaseName("IX_ConfiguracionesEscuela_FechaExpiracionLicencia");

                    b.HasIndex("NombreInstitucion")
                        .HasDatabaseName("IX_ConfiguracionesEscuela_NombreInstitucion");

                    b.HasIndex("TipoPlan")
                        .HasDatabaseName("IX_ConfiguracionesEscuela_TipoPlan");

                    b.ToTable("ConfiguracionesEscuela", null, t =>
                        {
                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_Calificaciones", "`CalificacionMinimaAprobatoria` < `CalificacionMaxima`");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_DecimalesCalificacion", "`DecimalesCalificacion` >= 0 AND `DecimalesCalificacion` <= 2");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_DuracionClase", "`DuracionClaseMinutos` >= 30 AND `DuracionClaseMinutos` <= 180");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_IntentosLogin", "`IntentosLoginFallidosAntesBloQueo` >= 3 AND `IntentosLoginFallidosAntesBloQueo` <= 10");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_Limites", "(`LimiteAlumnos` IS NULL OR `LimiteAlumnos` > 0) AND (`LimiteMaestros` IS NULL OR `LimiteMaestros` > 0) AND (`LimiteAlmacenamientoGB` IS NULL OR `LimiteAlmacenamientoGB` > 0)");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_LongitudPassword", "`LongitudMinimaPassword` >= 6 AND `LongitudMinimaPassword` <= 32");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_PeriodosPorCiclo", "`PeriodosPorCiclo` >= 1 AND `PeriodosPorCiclo` <= 6");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_PorcentajeAsistencia", "`PorcentajeMinimoAsistencia` >= 0 AND `PorcentajeMinimoAsistencia` <= 100");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_PrimerDiaSemana", "`PrimerDiaSemana` >= 0 AND `PrimerDiaSemana` <= 6");

                            t.HasCheckConstraint("CK_ConfiguracionesEscuela_TiempoSesion", "`TiempoSesionMinutos` >= 15 AND `TiempoSesionMinutos` <= 480");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Configuracion.ParametroSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("EsConfigurable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("EsGlobal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsSensible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsSoloLectura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<bool>("EstaEncriptado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Etiquetas")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ExpresionValidacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("FechaUltimoCambio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Grupo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("HabilitarCache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("Orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("RequiereReinicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("TiempoCacheMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(60);

                    b.Property<string>("TipoDato")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("String");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UrlAyuda")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("UsuarioUltimoCambioId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ValorAnterior")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<decimal?>("ValorMaximo")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("ValorMinimo")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ValorPredeterminado")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ValoresPermitidos")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_ParametrosSistema_Activo");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_ParametrosSistema_Categoria");

                    b.HasIndex("EsConfigurable")
                        .HasDatabaseName("IX_ParametrosSistema_EsConfigurable");

                    b.HasIndex("EsGlobal")
                        .HasDatabaseName("IX_ParametrosSistema_EsGlobal");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_ParametrosSistema_EscuelaId");

                    b.HasIndex("FechaUltimoCambio")
                        .HasDatabaseName("IX_ParametrosSistema_FechaUltimoCambio");

                    b.HasIndex("TipoDato")
                        .HasDatabaseName("IX_ParametrosSistema_TipoDato");

                    b.HasIndex("UsuarioUltimoCambioId");

                    b.HasIndex("Clave", "EscuelaId")
                        .IsUnique()
                        .HasDatabaseName("IX_ParametrosSistema_Clave_EscuelaId_Unique");

                    b.HasIndex("Categoria", "Grupo", "Orden")
                        .HasDatabaseName("IX_ParametrosSistema_Categoria_Grupo_Orden");

                    b.HasIndex("EscuelaId", "Categoria", "Activo")
                        .HasDatabaseName("IX_ParametrosSistema_Escuela_Categoria_Activo");

                    b.ToTable("ParametrosSistema", null, t =>
                        {
                            t.HasCheckConstraint("CK_ParametrosSistema_EsGlobal", "(`EsGlobal` = 0 AND `EscuelaId` IS NOT NULL) OR (`EsGlobal` = 1 AND `EscuelaId` IS NULL)");

                            t.HasCheckConstraint("CK_ParametrosSistema_Orden", "`Orden` >= 0");

                            t.HasCheckConstraint("CK_ParametrosSistema_TiempoCache", "`TiempoCacheMinutos` IS NULL OR `TiempoCacheMinutos` > 0");

                            t.HasCheckConstraint("CK_ParametrosSistema_ValorMinMax", "`ValorMinimo` IS NULL OR `ValorMaximo` IS NULL OR `ValorMinimo` <= `ValorMaximo`");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Configuracion.PreferenciaUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Alcance")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Usuario");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DispositivoOrigen")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("EsPreferenciaSistema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsPrivada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsSincronizable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Etiquetas")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ExpresionValidacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("FechaUltimaSincronizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimoCambio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Grupo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HashSincronizacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("Orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("RequiereValidacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("Personalizacion");

                    b.Property<string>("TipoDato")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("String");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ValorAnterior")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ValorPredeterminado")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ValoresPermitidos")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.HasKey("Id");

                    b.HasIndex("Activa")
                        .HasDatabaseName("IX_PreferenciasUsuario_Activa");

                    b.HasIndex("Alcance")
                        .HasDatabaseName("IX_PreferenciasUsuario_Alcance");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_PreferenciasUsuario_Categoria");

                    b.HasIndex("EsSincronizable")
                        .HasDatabaseName("IX_PreferenciasUsuario_EsSincronizable");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_PreferenciasUsuario_EscuelaId");

                    b.HasIndex("FechaUltimaSincronizacion")
                        .HasDatabaseName("IX_PreferenciasUsuario_FechaUltimaSincronizacion");

                    b.HasIndex("FechaUltimoCambio")
                        .HasDatabaseName("IX_PreferenciasUsuario_FechaUltimoCambio");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_PreferenciasUsuario_Tipo");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_PreferenciasUsuario_UsuarioId");

                    b.HasIndex("UsuarioId", "Clave")
                        .IsUnique()
                        .HasDatabaseName("IX_PreferenciasUsuario_Usuario_Clave_Unique");

                    b.HasIndex("Categoria", "Grupo", "Orden")
                        .HasDatabaseName("IX_PreferenciasUsuario_Categoria_Grupo_Orden");

                    b.HasIndex("UsuarioId", "Categoria", "Activa")
                        .HasDatabaseName("IX_PreferenciasUsuario_Usuario_Categoria_Activa");

                    b.HasIndex("UsuarioId", "Tipo", "Activa")
                        .HasDatabaseName("IX_PreferenciasUsuario_Usuario_Tipo_Activa");

                    b.ToTable("PreferenciasUsuario", null, t =>
                        {
                            t.HasCheckConstraint("CK_PreferenciasUsuario_AlcanceEscuela", "(`Alcance` != 'Escuela') OR (`Alcance` = 'Escuela' AND `EscuelaId` IS NOT NULL)");

                            t.HasCheckConstraint("CK_PreferenciasUsuario_AlcanceGlobal", "(`Alcance` != 'Global') OR (`Alcance` = 'Global' AND `EscuelaId` IS NULL)");

                            t.HasCheckConstraint("CK_PreferenciasUsuario_Orden", "`Orden` >= 0");

                            t.HasCheckConstraint("CK_PreferenciasUsuario_UsuarioId", "`UsuarioId` > 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Documentos.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Archivado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("ArchivoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("CantidadDescargas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CertificadoFirma")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ContenidoHtml")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("CorreosEnvio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DatosAdicionales")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("EntidadRelacionadaId")
                        .HasColumnType("int");

                    b.Property<bool>("EsPublico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Borrador");

                    b.Property<DateTime?>("FechaArchivado")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFirma")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimaDescarga")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaVigencia")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FirmadoPorId")
                        .HasColumnType("int");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("GeneradoAutomaticamente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("GeneradoPorId")
                        .HasColumnType("int");

                    b.Property<string>("HashFirma")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreEntidadRelacionada")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("PlantillaDocumentoId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("TamanioArchivo")
                        .HasColumnType("bigint");

                    b.Property<bool>("TieneFirmaDigital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TipoEntidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Archivado")
                        .HasDatabaseName("IX_Documentos_Archivado");

                    b.HasIndex("EsPublico")
                        .HasDatabaseName("IX_Documentos_EsPublico");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Documentos_EscuelaId");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_Documentos_Estado");

                    b.HasIndex("FechaGeneracion")
                        .HasDatabaseName("IX_Documentos_FechaGeneracion");

                    b.HasIndex("FechaVencimiento")
                        .HasDatabaseName("IX_Documentos_FechaVencimiento");

                    b.HasIndex("FirmadoPorId");

                    b.HasIndex("Folio")
                        .HasDatabaseName("IX_Documentos_Folio");

                    b.HasIndex("GeneradoPorId")
                        .HasDatabaseName("IX_Documentos_GeneradoPorId");

                    b.HasIndex("PlantillaDocumentoId")
                        .HasDatabaseName("IX_Documentos_PlantillaDocumentoId");

                    b.HasIndex("TieneFirmaDigital")
                        .HasDatabaseName("IX_Documentos_TieneFirmaDigital");

                    b.HasIndex("TipoDocumento")
                        .HasDatabaseName("IX_Documentos_TipoDocumento");

                    b.HasIndex("TipoEntidad", "EntidadRelacionadaId")
                        .HasDatabaseName("IX_Documentos_TipoEntidad_EntidadId");

                    b.HasIndex("EscuelaId", "Estado", "FechaGeneracion")
                        .HasDatabaseName("IX_Documentos_Escuela_Estado_Fecha");

                    b.HasIndex("EscuelaId", "TipoDocumento", "Estado")
                        .HasDatabaseName("IX_Documentos_Escuela_Tipo_Estado");

                    b.ToTable("Documentos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Documentos_CantidadDescargas", "`CantidadDescargas` >= 0");

                            t.HasCheckConstraint("CK_Documentos_FechaVencimiento", "`FechaVencimiento` IS NULL OR (`FechaVigencia` IS NOT NULL AND `FechaVencimiento` >= `FechaVigencia`)");

                            t.HasCheckConstraint("CK_Documentos_FirmaDigital", "(`TieneFirmaDigital` = 0) OR (`TieneFirmaDigital` = 1 AND `HashFirma` IS NOT NULL AND `FirmadoPorId` IS NOT NULL)");

                            t.HasCheckConstraint("CK_Documentos_TamanioArchivo", "`TamanioArchivo` IS NULL OR `TamanioArchivo` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Documentos.PlantillaDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int?>("AlturaEncabezado")
                        .HasColumnType("int");

                    b.Property<int?>("AlturaPiePagina")
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ConsecutivoFolio")
                        .HasColumnType("int");

                    b.Property<string>("ContenidoHtml")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("EncabezadoHtml")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("EsPlantillaPorDefecto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("EstilosCSS")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime?>("FechaUltimaGeneracion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagenMarcaAguaUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MargenDerecho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<int>("MargenInferior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<int>("MargenIzquierdo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<int>("MargenSuperior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NotasVersion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("OpacidadMarcaAgua")
                        .HasColumnType("int");

                    b.Property<string>("Orientacion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Vertical");

                    b.Property<string>("PiePaginaHtml")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("PrefijoFolio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("RequiereFirmaDigital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiereFolio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TamanioPagina")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("A4");

                    b.Property<string>("TextoMarcaAgua")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TieneEncabezado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("TieneMarcaAgua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("TienePiePagina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("VariablesDisponibles")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("VecesUsada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("1.0");

                    b.HasKey("Id");

                    b.HasIndex("Activa")
                        .HasDatabaseName("IX_PlantillasDocumento_Activa");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_PlantillasDocumento_Categoria");

                    b.HasIndex("EsPlantillaPorDefecto")
                        .HasDatabaseName("IX_PlantillasDocumento_EsPlantillaPorDefecto");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_PlantillasDocumento_EscuelaId");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_PlantillasDocumento_Nombre");

                    b.HasIndex("TipoDocumento")
                        .HasDatabaseName("IX_PlantillasDocumento_TipoDocumento");

                    b.HasIndex("EscuelaId", "TipoDocumento", "Activa")
                        .HasDatabaseName("IX_PlantillasDocumento_Escuela_Tipo_Activa");

                    b.HasIndex("EscuelaId", "TipoDocumento", "EsPlantillaPorDefecto")
                        .HasDatabaseName("IX_PlantillasDocumento_Escuela_Tipo_Default");

                    b.ToTable("PlantillasDocumento", null, t =>
                        {
                            t.HasCheckConstraint("CK_PlantillasDocumento_ConsecutivoFolio", "`ConsecutivoFolio` IS NULL OR `ConsecutivoFolio` >= 1");

                            t.HasCheckConstraint("CK_PlantillasDocumento_Margenes", "`MargenSuperior` >= 0 AND `MargenInferior` >= 0 AND `MargenIzquierdo` >= 0 AND `MargenDerecho` >= 0");

                            t.HasCheckConstraint("CK_PlantillasDocumento_OpacidadMarcaAgua", "`OpacidadMarcaAgua` IS NULL OR (`OpacidadMarcaAgua` >= 0 AND `OpacidadMarcaAgua` <= 100)");

                            t.HasCheckConstraint("CK_PlantillasDocumento_VecesUsada", "`VecesUsada` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Documentos.ReportePersonalizado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("AsuntoCorreo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConfiguracionColumnas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ConfiguracionGraficas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ConfiguracionJSON")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ConsultaSQL")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("CorreosDestinatarios")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CuerpoCorreo")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("DiaMes")
                        .HasColumnType("int");

                    b.Property<int?>("DiaSemana")
                        .HasColumnType("int");

                    b.Property<bool>("EnvioAutomatico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsPrivado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsReporteSistema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("ExpresionCron")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("FechaUltimaEjecucionManual")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FiltrosPredeterminados")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("FormatoSalida")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("PDF");

                    b.Property<string>("FormatosAdicionales")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Frecuencia")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("HabilitarCache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("HoraEjecucion")
                        .HasColumnType("int");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LimiteRegistros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("Orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("OrdenamientoPredeterminado")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OrigenDatos")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("SQL");

                    b.Property<string>("ParametrosJSON")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ParametrosObligatorios")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("PermiteOrdenamientoDinamico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("PlantillaHTML")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("ProgramacionAutomatica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ProximaEjecucion")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("RequiereAprobacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiereParametros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("RolesPermitidos")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("StoredProcedure")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TiempoCacheMinutos")
                        .HasColumnType("int");

                    b.Property<decimal?>("TiempoPromedioEjecucion")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("TieneGraficas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("TimeoutSegundos")
                        .HasColumnType("int");

                    b.Property<string>("TipoReporte")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UltimaEjecucion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("VecesEjecutado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_ReportesPersonalizados_Activo");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_ReportesPersonalizados_Categoria");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ReportesPersonalizados_CreatedBy");

                    b.HasIndex("EsPrivado")
                        .HasDatabaseName("IX_ReportesPersonalizados_EsPrivado");

                    b.HasIndex("EsReporteSistema")
                        .HasDatabaseName("IX_ReportesPersonalizados_EsReporteSistema");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_ReportesPersonalizados_EscuelaId");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_ReportesPersonalizados_Nombre");

                    b.HasIndex("ProgramacionAutomatica")
                        .HasDatabaseName("IX_ReportesPersonalizados_ProgramacionAutomatica");

                    b.HasIndex("ProximaEjecucion")
                        .HasDatabaseName("IX_ReportesPersonalizados_ProximaEjecucion");

                    b.HasIndex("TipoReporte")
                        .HasDatabaseName("IX_ReportesPersonalizados_TipoReporte");

                    b.HasIndex("ProgramacionAutomatica", "ProximaEjecucion")
                        .HasDatabaseName("IX_ReportesPersonalizados_Programacion_Proxima");

                    b.HasIndex("EscuelaId", "TipoReporte", "Activo")
                        .HasDatabaseName("IX_ReportesPersonalizados_Escuela_Tipo_Activo");

                    b.ToTable("ReportesPersonalizados", null, t =>
                        {
                            t.HasCheckConstraint("CK_ReportesPersonalizados_DiaMes", "`DiaMes` IS NULL OR (`DiaMes` >= 1 AND `DiaMes` <= 31)");

                            t.HasCheckConstraint("CK_ReportesPersonalizados_DiaSemana", "`DiaSemana` IS NULL OR (`DiaSemana` >= 0 AND `DiaSemana` <= 6)");

                            t.HasCheckConstraint("CK_ReportesPersonalizados_HoraEjecucion", "`HoraEjecucion` IS NULL OR (`HoraEjecucion` >= 0 AND `HoraEjecucion` <= 23)");

                            t.HasCheckConstraint("CK_ReportesPersonalizados_LimiteRegistros", "`LimiteRegistros` >= 0");

                            t.HasCheckConstraint("CK_ReportesPersonalizados_TiempoCacheMinutos", "`TiempoCacheMinutos` IS NULL OR `TiempoCacheMinutos` > 0");

                            t.HasCheckConstraint("CK_ReportesPersonalizados_TiempoPromedioEjecucion", "`TiempoPromedioEjecucion` IS NULL OR `TiempoPromedioEjecucion` >= 0");

                            t.HasCheckConstraint("CK_ReportesPersonalizados_TimeoutSegundos", "`TimeoutSegundos` IS NULL OR `TimeoutSegundos` > 0");

                            t.HasCheckConstraint("CK_ReportesPersonalizados_VecesEjecutado", "`VecesEjecutado` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Escuelas.Escuela", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Configuracion")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EspacioAlmacenamiento")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("MaxAlumnos")
                        .HasColumnType("int");

                    b.Property<int?>("MaxMaestros")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SitioWeb")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Escuelas_Activo");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_Escuelas_Codigo_Unique");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Escuelas_Email");

                    b.HasIndex("RFC")
                        .HasDatabaseName("IX_Escuelas_RFC");

                    b.ToTable("Escuelas", null, t =>
                        {
                            t.HasCheckConstraint("CK_Escuelas_EspacioAlmacenamiento", "`EspacioAlmacenamiento` IS NULL OR `EspacioAlmacenamiento` > 0");

                            t.HasCheckConstraint("CK_Escuelas_MaxAlumnos", "`MaxAlumnos` IS NULL OR `MaxAlumnos` > 0");

                            t.HasCheckConstraint("CK_Escuelas_MaxMaestros", "`MaxMaestros` IS NULL OR `MaxMaestros` > 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Evaluacion.Asistencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int?>("AlumnoId1")
                        .HasColumnType("int");

                    b.Property<int?>("AproboJustificanteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("FechaJustificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaNotificacionPadres")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("FueModificada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("HoraEntrada")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("HoraSalida")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Justificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("JustificanteUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("MinutosRetardo")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MotivoModificacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("PadresNotificados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("RegistradoPor")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_Asistencias_AlumnoId");

                    b.HasIndex("AlumnoId1");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Asistencias_EscuelaId");

                    b.HasIndex("Estatus")
                        .HasDatabaseName("IX_Asistencias_Estatus");

                    b.HasIndex("Fecha")
                        .HasDatabaseName("IX_Asistencias_Fecha");

                    b.HasIndex("FechaRegistro")
                        .HasDatabaseName("IX_Asistencias_FechaRegistro");

                    b.HasIndex("GrupoId")
                        .HasDatabaseName("IX_Asistencias_GrupoId");

                    b.HasIndex("Justificado")
                        .HasDatabaseName("IX_Asistencias_Justificado");

                    b.HasIndex("RegistradoPor")
                        .HasDatabaseName("IX_Asistencias_RegistradoPor");

                    b.HasIndex("AlumnoId", "Estatus")
                        .HasDatabaseName("IX_Asistencias_Alumno_Estatus");

                    b.HasIndex("AlumnoId", "Fecha")
                        .IsUnique()
                        .HasDatabaseName("IX_Asistencias_Alumno_Fecha_Unique");

                    b.HasIndex("GrupoId", "Fecha")
                        .HasDatabaseName("IX_Asistencias_Grupo_Fecha");

                    b.HasIndex("AlumnoId", "Fecha", "Estatus")
                        .HasDatabaseName("IX_Asistencias_Alumno_Fecha_Estatus");

                    b.HasIndex("EscuelaId", "Fecha", "Estatus")
                        .HasDatabaseName("IX_Asistencias_Escuela_Fecha_Estatus");

                    b.ToTable("Asistencias", null, t =>
                        {
                            t.HasCheckConstraint("CK_Asistencias_Fecha", "`Fecha` <= CAST(GETDATE() AS DATE)");

                            t.HasCheckConstraint("CK_Asistencias_Horarios", "`HoraEntrada` IS NULL OR `HoraSalida` IS NULL OR `HoraEntrada` < `HoraSalida`");

                            t.HasCheckConstraint("CK_Asistencias_MinutosRetardo", "`MinutosRetardo` IS NULL OR `MinutosRetardo` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Evaluacion.Calificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int")
                        .HasColumnName("alumno_id");

                    b.Property<bool>("Aprobado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("aprobado");

                    b.Property<string>("AreasOportunidad")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("areas_oportunidad");

                    b.Property<bool>("Bloqueada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("bloqueada");

                    b.Property<string>("CalificacionLetra")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("calificacion_letra");

                    b.Property<decimal?>("CalificacionMinima")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("calificacion_minima");

                    b.Property<decimal>("CalificacionNumerica")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("calificacion_numerica");

                    b.Property<decimal?>("CalificacionOriginal")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("calificacion_original");

                    b.Property<int?>("CapturadoPor")
                        .HasColumnType("int")
                        .HasColumnName("capturado_por");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<bool>("EsRecalificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("es_recalificacion");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int")
                        .HasColumnName("escuela_id");

                    b.Property<DateTime?>("FechaBloqueo")
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_bloqueo");

                    b.Property<DateTime>("FechaCaptura")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_captura");

                    b.Property<DateTime?>("FechaRecalificacion")
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_recalificacion");

                    b.Property<DateTime?>("FechaUltimaModificacion")
                        .HasColumnType("DATETIME")
                        .HasColumnName("fecha_ultima_modificacion");

                    b.Property<string>("Fortalezas")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fortalezas");

                    b.Property<bool>("FueModificada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("fue_modificada");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int")
                        .HasColumnName("materia_id");

                    b.Property<int?>("ModificadoPor")
                        .HasColumnType("int")
                        .HasColumnName("modificado_por");

                    b.Property<string>("MotivoModificacion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("motivo_modificacion");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("observaciones");

                    b.Property<int>("PeriodoId")
                        .HasColumnType("int")
                        .HasColumnName("periodo_id");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("peso");

                    b.Property<string>("Recomendaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("recomendaciones");

                    b.Property<string>("TipoEvaluacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_evaluacion");

                    b.Property<string>("TipoRecalificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_recalificacion");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<bool>("VisibleParaPadres")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("visible_para_padres");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("idx_calificacion_alumno");

                    b.HasIndex("Bloqueada")
                        .HasDatabaseName("idx_calificacion_bloqueada");

                    b.HasIndex("CapturadoPor");

                    b.HasIndex("EscuelaId");

                    b.HasIndex("MateriaId");

                    b.HasIndex("PeriodoId");

                    b.HasIndex("VisibleParaPadres")
                        .HasDatabaseName("idx_calificacion_visible_padres");

                    b.HasIndex("GrupoId", "PeriodoId")
                        .HasDatabaseName("idx_calificacion_grupo_periodo");

                    b.HasIndex("AlumnoId", "MateriaId", "PeriodoId")
                        .IsUnique()
                        .HasDatabaseName("idx_calificacion_alumno_materia_periodo");

                    b.ToTable("calificaciones", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Calificacion_Rango", "calificacion_numerica >=0 AND calificacion_numerica <=10");

                            t.HasCheckConstraint("CHK_Peso_Rango", "peso IS NULL OR (peso >=0 AND peso <=100)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Evaluacion.PeriodoEvaluacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("CalificacionesDefinitivas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("CicloEscolar")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("FechaLimiteCaptura")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("FechaLimiteRecalificacion")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("FechaPublicacion")
                        .HasColumnType("DATE");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<bool>("PermiteRecalificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TipoPeriodo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_PeriodosEvaluacion_Activo");

                    b.HasIndex("CalificacionesDefinitivas")
                        .HasDatabaseName("IX_PeriodosEvaluacion_CalificacionesDefinitivas");

                    b.HasIndex("CicloEscolar")
                        .HasDatabaseName("IX_PeriodosEvaluacion_CicloEscolar");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_PeriodosEvaluacion_EscuelaId");

                    b.HasIndex("FechaFin")
                        .HasDatabaseName("IX_PeriodosEvaluacion_FechaFin");

                    b.HasIndex("FechaInicio")
                        .HasDatabaseName("IX_PeriodosEvaluacion_FechaInicio");

                    b.HasIndex("CicloEscolar", "Numero")
                        .HasDatabaseName("IX_PeriodosEvaluacion_Ciclo_Numero");

                    b.HasIndex("EscuelaId", "CicloEscolar", "Activo")
                        .HasDatabaseName("IX_PeriodosEvaluacion_Escuela_Ciclo_Activo");

                    b.HasIndex("EscuelaId", "CicloEscolar", "Numero")
                        .IsUnique()
                        .HasDatabaseName("IX_PeriodosEvaluacion_Escuela_Ciclo_Numero_Unique");

                    b.HasIndex("EscuelaId", "FechaInicio", "FechaFin")
                        .HasDatabaseName("IX_PeriodosEvaluacion_Escuela_Fechas");

                    b.ToTable("PeriodosEvaluacion", null, t =>
                        {
                            t.HasCheckConstraint("CK_PeriodosEvaluacion_FechaLimiteCaptura", "`FechaLimiteCaptura` IS NULL OR `FechaLimiteCaptura` >= `FechaFin`");

                            t.HasCheckConstraint("CK_PeriodosEvaluacion_FechaPublicacion", "`FechaPublicacion` IS NULL OR `FechaPublicacion` >= `FechaFin`");

                            t.HasCheckConstraint("CK_PeriodosEvaluacion_Fechas", "`FechaInicio` < `FechaFin`");

                            t.HasCheckConstraint("CK_PeriodosEvaluacion_Numero", "`Numero` > 0");

                            t.HasCheckConstraint("CK_PeriodosEvaluacion_Porcentaje", "`Porcentaje` >= 0 AND `Porcentaje` <= 100");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int?>("CanceladoPorId")
                        .HasColumnType("int");

                    b.Property<string>("CicloEscolar")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ConceptoPagoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Descuento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Pendiente");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaPagoCompleto")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("GeneradoAutomaticamente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MesCorrespondiente")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MontoFinal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MontoPagado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Mora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("MotivoCancelacion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("NumeroRecibo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<decimal?>("PorcentajeDescuento")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ReferenciaExterna")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("SaldoPendiente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_Cargos_AlumnoId");

                    b.HasIndex("CanceladoPorId");

                    b.HasIndex("ConceptoPagoId")
                        .HasDatabaseName("IX_Cargos_ConceptoPagoId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Cargos_EscuelaId");

                    b.HasIndex("Estatus")
                        .HasDatabaseName("IX_Cargos_Estatus");

                    b.HasIndex("FechaVencimiento")
                        .HasDatabaseName("IX_Cargos_FechaVencimiento");

                    b.HasIndex("NumeroRecibo")
                        .HasDatabaseName("IX_Cargos_NumeroRecibo");

                    b.HasIndex("AlumnoId", "CicloEscolar")
                        .HasDatabaseName("IX_Cargos_Alumno_Ciclo");

                    b.HasIndex("AlumnoId", "Estatus")
                        .HasDatabaseName("IX_Cargos_Alumno_Estatus");

                    b.HasIndex("EscuelaId", "FechaVencimiento", "Estatus")
                        .HasDatabaseName("IX_Cargos_Escuela_Fecha_Estatus");

                    b.ToTable("Cargos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Cargos_Descuento", "`Descuento` >= 0 AND `Descuento` <= `Monto`");

                            t.HasCheckConstraint("CK_Cargos_FechaVencimiento", "`FechaVencimiento` >= `FechaCreacion`");

                            t.HasCheckConstraint("CK_Cargos_Monto", "`Monto` >= 0");

                            t.HasCheckConstraint("CK_Cargos_MontoFinal", "`MontoFinal` >= 0");

                            t.HasCheckConstraint("CK_Cargos_MontoPagado", "`MontoPagado` >= 0");

                            t.HasCheckConstraint("CK_Cargos_Mora", "`Mora` >= 0");

                            t.HasCheckConstraint("CK_Cargos_SaldoPendiente", "`SaldoPendiente` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.ConceptoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("AplicaDescuentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("CategoriaFiscal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CicloEscolar")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CuentaContable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("DiasGracia")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int?>("GradoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("MontoBase")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("NivelEducativoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Periodicidad")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("PorcentajeMaximoDescuento")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("PorcentajeMora")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("Recurrente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("TieneMora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_ConceptosPago_Activo");

                    b.HasIndex("Codigo")
                        .HasDatabaseName("IX_ConceptosPago_Codigo");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_ConceptosPago_EscuelaId");

                    b.HasIndex("GradoId")
                        .HasDatabaseName("IX_ConceptosPago_GradoId");

                    b.HasIndex("NivelEducativoId")
                        .HasDatabaseName("IX_ConceptosPago_NivelEducativoId");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_ConceptosPago_Tipo");

                    b.HasIndex("EscuelaId", "Activo")
                        .HasDatabaseName("IX_ConceptosPago_Escuela_Activo");

                    b.HasIndex("Recurrente", "Periodicidad")
                        .HasDatabaseName("IX_ConceptosPago_Recurrente_Periodicidad");

                    b.ToTable("ConceptosPago", null, t =>
                        {
                            t.HasCheckConstraint("CK_ConceptosPago_DiasGracia", "`DiasGracia` IS NULL OR `DiasGracia` >= 0");

                            t.HasCheckConstraint("CK_ConceptosPago_MontoBase", "`MontoBase` >= 0");

                            t.HasCheckConstraint("CK_ConceptosPago_PorcentajeDescuento", "`PorcentajeMaximoDescuento` IS NULL OR (`PorcentajeMaximoDescuento` >= 0 AND `PorcentajeMaximoDescuento` <= 100)");

                            t.HasCheckConstraint("CK_ConceptosPago_PorcentajeMora", "`PorcentajeMora` IS NULL OR `PorcentajeMora` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.EstadoCuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AlCorriente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int>("CargosPagados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CargosParciales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CargosPendientes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CargosVencidos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CicloEscolar")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaProximoVencimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimoCargo")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimoPago")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NotasAtencion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("RequiereAtencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<decimal>("SaldoAFavor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SaldoPendiente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("TieneAdeudos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("TieneCargosVencidos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<decimal>("TotalCargos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("TotalCargosCantidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalDescuentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalMora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalPagos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("TotalPagosCantidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlCorriente")
                        .HasDatabaseName("IX_EstadosCuenta_AlCorriente");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_EstadosCuenta_AlumnoId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_EstadosCuenta_EscuelaId");

                    b.HasIndex("FechaActualizacion")
                        .HasDatabaseName("IX_EstadosCuenta_FechaActualizacion");

                    b.HasIndex("RequiereAtencion")
                        .HasDatabaseName("IX_EstadosCuenta_RequiereAtencion");

                    b.HasIndex("TieneAdeudos")
                        .HasDatabaseName("IX_EstadosCuenta_TieneAdeudos");

                    b.HasIndex("TieneCargosVencidos")
                        .HasDatabaseName("IX_EstadosCuenta_TieneCargosVencidos");

                    b.HasIndex("AlumnoId", "CicloEscolar")
                        .IsUnique()
                        .HasDatabaseName("IX_EstadosCuenta_Alumno_Ciclo_Unique");

                    b.HasIndex("EscuelaId", "CicloEscolar", "TieneAdeudos")
                        .HasDatabaseName("IX_EstadosCuenta_Escuela_Ciclo_Adeudos");

                    b.ToTable("EstadosCuenta", null, t =>
                        {
                            t.HasCheckConstraint("CK_EstadosCuenta_Contadores", "`CargosPendientes` >= 0 AND `CargosPagados` >= 0 AND `CargosVencidos` >= 0 AND `CargosParciales` >= 0");

                            t.HasCheckConstraint("CK_EstadosCuenta_SaldoAFavor", "`SaldoAFavor` >= 0");

                            t.HasCheckConstraint("CK_EstadosCuenta_SaldoPendiente", "`SaldoPendiente` >= 0");

                            t.HasCheckConstraint("CK_EstadosCuenta_TotalCargos", "`TotalCargos` >= 0");

                            t.HasCheckConstraint("CK_EstadosCuenta_TotalDescuentos", "`TotalDescuentos` >= 0 AND `TotalDescuentos` <= `TotalCargos`");

                            t.HasCheckConstraint("CK_EstadosCuenta_TotalPagos", "`TotalPagos` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<string>("Banco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Cancelado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("CanceladoPorId")
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DatosAdicionales")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("DireccionIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("FacturaPdfUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FacturaXmlUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Facturado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("FechaAplicacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFacturacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FolioRecibo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("MotivoCancelacion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("RecibidoPorId")
                        .HasColumnType("int");

                    b.Property<string>("ReciboUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReferenciaExterna")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SerieRecibo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UltimosDigitosTarjeta")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UuidFactura")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_Pagos_AlumnoId");

                    b.HasIndex("Cancelado")
                        .HasDatabaseName("IX_Pagos_Cancelado");

                    b.HasIndex("CanceladoPorId");

                    b.HasIndex("CargoId")
                        .HasDatabaseName("IX_Pagos_CargoId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Pagos_EscuelaId");

                    b.HasIndex("Facturado")
                        .HasDatabaseName("IX_Pagos_Facturado");

                    b.HasIndex("FechaPago")
                        .HasDatabaseName("IX_Pagos_FechaPago");

                    b.HasIndex("FolioRecibo")
                        .IsUnique()
                        .HasDatabaseName("IX_Pagos_FolioRecibo_Unique");

                    b.HasIndex("MetodoPago")
                        .HasDatabaseName("IX_Pagos_MetodoPago");

                    b.HasIndex("RecibidoPorId");

                    b.HasIndex("UuidFactura")
                        .HasDatabaseName("IX_Pagos_UuidFactura");

                    b.HasIndex("AlumnoId", "FechaPago")
                        .HasDatabaseName("IX_Pagos_Alumno_Fecha");

                    b.HasIndex("EscuelaId", "FechaPago", "Cancelado")
                        .HasDatabaseName("IX_Pagos_Escuela_Fecha_Cancelado");

                    b.ToTable("Pagos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Pagos_FechaAplicacion", "`FechaAplicacion` IS NULL OR `FechaAplicacion` >= `FechaPago`");

                            t.HasCheckConstraint("CK_Pagos_Monto", "`Monto` > 0");

                            t.HasCheckConstraint("CK_Pagos_UltimosDigitos", "`UltimosDigitosTarjeta` IS NULL OR LEN(`UltimosDigitosTarjeta`) = 4");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.Alergia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int>("ExpedienteMedicoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaDiagnostico")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaSuperacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gravedad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("InstruccionesEmergencia")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedicamentoEmergencia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MedicoDiagnostico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreAlergeno")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("PuedeSerAnafilactica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiereAutoinyector")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Sintomas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TipoPrueba")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TratamientoRecomendado")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Activa")
                        .HasDatabaseName("IX_Alergias_Activa");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Alergias_EscuelaId");

                    b.HasIndex("ExpedienteMedicoId")
                        .HasDatabaseName("IX_Alergias_ExpedienteMedicoId");

                    b.HasIndex("Gravedad")
                        .HasDatabaseName("IX_Alergias_Gravedad");

                    b.HasIndex("PuedeSerAnafilactica")
                        .HasDatabaseName("IX_Alergias_PuedeSerAnafilactica");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_Alergias_Tipo");

                    b.HasIndex("ExpedienteMedicoId", "Activa")
                        .HasDatabaseName("IX_Alergias_Expediente_Activa");

                    b.HasIndex("Tipo", "Gravedad", "Activa")
                        .HasDatabaseName("IX_Alergias_Tipo_Gravedad_Activa");

                    b.ToTable("Alergias", null, t =>
                        {
                            t.HasCheckConstraint("CK_Alergias_FechaDiagnostico", "`FechaDiagnostico` IS NULL OR `FechaDiagnostico` <= GETDATE()");

                            t.HasCheckConstraint("CK_Alergias_FechaSuperacion", "`FechaSuperacion` IS NULL OR (`FechaSuperacion` >= `FechaDiagnostico` AND `Activa` = 0)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.ExpedienteMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Alergias")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<string>("CondicionesMedicas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("ContactoEmergenciaNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ContactoEmergenciaParentesco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactoEmergenciaTelefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactoEmergenciaTelefonoAlt")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DetallesAtencionEspecial")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Estatura")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("ExpedienteCompleto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("FechaUltimaActualizacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaUltimaRevision")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("IMC")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedicamentosRegulares")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("MedicoDireccion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("MedicoEspecialidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicoNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MedicoTelefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("RequiereAtencionEspecial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Restricciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("SeguroNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SeguroNumeroPoliza")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SeguroTelefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("SeguroVigencia")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("TieneSeguro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("TipoSangre")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("VacunacionCompleta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("VacunacionObservaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_ExpedientesMedicos_Activo");

                    b.HasIndex("AlumnoId")
                        .IsUnique()
                        .HasDatabaseName("IX_ExpedientesMedicos_AlumnoId_Unique");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_ExpedientesMedicos_EscuelaId");

                    b.HasIndex("FechaUltimaActualizacion")
                        .HasDatabaseName("IX_ExpedientesMedicos_FechaUltimaActualizacion");

                    b.HasIndex("RequiereAtencionEspecial")
                        .HasDatabaseName("IX_ExpedientesMedicos_RequiereAtencionEspecial");

                    b.HasIndex("SeguroVigencia")
                        .HasDatabaseName("IX_ExpedientesMedicos_SeguroVigencia");

                    b.HasIndex("TieneSeguro")
                        .HasDatabaseName("IX_ExpedientesMedicos_TieneSeguro");

                    b.HasIndex("EscuelaId", "Activo")
                        .HasDatabaseName("IX_ExpedientesMedicos_Escuela_Activo");

                    b.ToTable("ExpedientesMedicos", null, t =>
                        {
                            t.HasCheckConstraint("CK_ExpedientesMedicos_Estatura", "`Estatura` IS NULL OR `Estatura` > 0");

                            t.HasCheckConstraint("CK_ExpedientesMedicos_IMC", "`IMC` IS NULL OR `IMC` > 0");

                            t.HasCheckConstraint("CK_ExpedientesMedicos_Peso", "`Peso` IS NULL OR `Peso` > 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.HistorialMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CasoCerrado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("DescripcionCirugia")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("DiasHospitalizado")
                        .HasColumnType("int");

                    b.Property<string>("DocumentosUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("EspecialidadMedico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ExpedienteMedicoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaAltaHospital")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaCierreCaso")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaIncidente")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaIngresoHospital")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaNotificacionPadres")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaProximaConsulta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gravedad")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("IndicacionesSeguimiento")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("InstitucionAtencion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LugarAtencion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LugarIncidente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MedicamentosRecetados")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("MedicoAtencion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MedioNotificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotivoHospitalizacion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("OcurrioEnEscuela")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("PadresNotificados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("PersonaQueNotifico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ProcedimientosRealizados")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("RegistradoPorId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiereSeguimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequirioCirugia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequirioHospitalizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Sintomas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("TipoIncidente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TratamientoAplicado")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CasoCerrado")
                        .HasDatabaseName("IX_HistorialMedico_CasoCerrado");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_HistorialMedico_EscuelaId");

                    b.HasIndex("ExpedienteMedicoId")
                        .HasDatabaseName("IX_HistorialMedico_ExpedienteMedicoId");

                    b.HasIndex("FechaIncidente")
                        .HasDatabaseName("IX_HistorialMedico_FechaIncidente");

                    b.HasIndex("FechaProximaConsulta")
                        .HasDatabaseName("IX_HistorialMedico_FechaProximaConsulta");

                    b.HasIndex("Gravedad")
                        .HasDatabaseName("IX_HistorialMedico_Gravedad");

                    b.HasIndex("OcurrioEnEscuela")
                        .HasDatabaseName("IX_HistorialMedico_OcurrioEnEscuela");

                    b.HasIndex("RegistradoPorId");

                    b.HasIndex("RequiereSeguimiento")
                        .HasDatabaseName("IX_HistorialMedico_RequiereSeguimiento");

                    b.HasIndex("RequirioHospitalizacion")
                        .HasDatabaseName("IX_HistorialMedico_RequirioHospitalizacion");

                    b.HasIndex("TipoIncidente")
                        .HasDatabaseName("IX_HistorialMedico_TipoIncidente");

                    b.HasIndex("ExpedienteMedicoId", "FechaIncidente")
                        .HasDatabaseName("IX_HistorialMedico_Expediente_Fecha");

                    b.HasIndex("TipoIncidente", "Gravedad", "FechaIncidente")
                        .HasDatabaseName("IX_HistorialMedico_Tipo_Gravedad_Fecha");

                    b.ToTable("HistorialMedico", null, t =>
                        {
                            t.HasCheckConstraint("CK_HistorialMedico_DiasHospitalizado", "`DiasHospitalizado` IS NULL OR `DiasHospitalizado` >= 0");

                            t.HasCheckConstraint("CK_HistorialMedico_FechaAltaHospital", "`FechaAltaHospital` IS NULL OR `FechaAltaHospital` >= `FechaIngresoHospital`");

                            t.HasCheckConstraint("CK_HistorialMedico_FechaIncidente", "`FechaIncidente` <= GETDATE()");

                            t.HasCheckConstraint("CK_HistorialMedico_Hospitalizacion", "(`RequirioHospitalizacion` = 0) OR (`RequirioHospitalizacion` = 1 AND `FechaIngresoHospital` IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AdministrarEnEscuela")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("CedulaMedico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EfectosSecundarios")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("EspecialidadMedico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Activo");

                    b.Property<int>("ExpedienteMedicoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaSuspension")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Frecuencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HorarioEscolar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Indicacion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("InstruccionesEspeciales")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedicoPrescriptor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MotivoSuspension")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("NombreGenerico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombreMedicamento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Precauciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<bool>("PuedeAutoAdministrar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("RecetaUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("RequiereSupervision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("TratamientoCronico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Via")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AdministrarEnEscuela")
                        .HasDatabaseName("IX_Medicamentos_AdministrarEnEscuela");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Medicamentos_EscuelaId");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_Medicamentos_Estado");

                    b.HasIndex("ExpedienteMedicoId")
                        .HasDatabaseName("IX_Medicamentos_ExpedienteMedicoId");

                    b.HasIndex("FechaFin")
                        .HasDatabaseName("IX_Medicamentos_FechaFin");

                    b.HasIndex("FechaInicio")
                        .HasDatabaseName("IX_Medicamentos_FechaInicio");

                    b.HasIndex("NombreMedicamento")
                        .HasDatabaseName("IX_Medicamentos_NombreMedicamento");

                    b.HasIndex("TratamientoCronico")
                        .HasDatabaseName("IX_Medicamentos_TratamientoCronico");

                    b.HasIndex("Estado", "FechaFin")
                        .HasDatabaseName("IX_Medicamentos_Estado_FechaFin");

                    b.HasIndex("ExpedienteMedicoId", "Estado")
                        .HasDatabaseName("IX_Medicamentos_Expediente_Estado");

                    b.ToTable("Medicamentos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Medicamentos_FechaFin", "`FechaFin` IS NULL OR `FechaFin` >= `FechaInicio`");

                            t.HasCheckConstraint("CK_Medicamentos_FechaSuspension", "`FechaSuspension` IS NULL OR (`FechaSuspension` >= `FechaInicio` AND `Estado` = 'Suspendido')");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.Vacuna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ComprobanteUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DescripcionReacciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<int>("ExpedienteMedicoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaCaducidad")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaProximaDosis")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstitucionAplicacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lote")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LugarAnatomico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreVacuna")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("PersonalAplicacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("TuvoReacciones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Vacunas_EscuelaId");

                    b.HasIndex("ExpedienteMedicoId")
                        .HasDatabaseName("IX_Vacunas_ExpedienteMedicoId");

                    b.HasIndex("FechaAplicacion")
                        .HasDatabaseName("IX_Vacunas_FechaAplicacion");

                    b.HasIndex("FechaProximaDosis")
                        .HasDatabaseName("IX_Vacunas_FechaProximaDosis");

                    b.HasIndex("NombreVacuna")
                        .HasDatabaseName("IX_Vacunas_NombreVacuna");

                    b.HasIndex("ExpedienteMedicoId", "NombreVacuna", "FechaAplicacion")
                        .HasDatabaseName("IX_Vacunas_Expediente_Nombre_Fecha");

                    b.ToTable("Vacunas", null, t =>
                        {
                            t.HasCheckConstraint("CK_Vacunas_FechaAplicacion", "`FechaAplicacion` <= GETDATE()");

                            t.HasCheckConstraint("CK_Vacunas_FechaCaducidad", "`FechaCaducidad` IS NULL OR `FechaCaducidad` >= `FechaAplicacion`");

                            t.HasCheckConstraint("CK_Vacunas_FechaProximaDosis", "`FechaProximaDosis` IS NULL OR `FechaProximaDosis` > `FechaAplicacion`");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Tareas.Tarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("ArchivoAdjuntoNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<long?>("ArchivoAdjuntoTamano")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchivoAdjuntoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaLimiteTardia")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaestroId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<decimal?>("PenalizacionTardia")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("PermiteEntregaTardia")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorPuntos")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Tareas_Activo");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_Tareas_EscuelaId");

                    b.HasIndex("FechaEntrega")
                        .HasDatabaseName("IX_Tareas_FechaEntrega");

                    b.HasIndex("MaestroId")
                        .HasDatabaseName("IX_Tareas_MaestroId");

                    b.HasIndex("MateriaId");

                    b.HasIndex("GrupoId", "MateriaId")
                        .HasDatabaseName("IX_Tareas_Grupo_Materia");

                    b.HasIndex("GrupoId", "FechaEntrega", "Activo")
                        .HasDatabaseName("IX_Tareas_Grupo_Fecha_Activo");

                    b.ToTable("Tareas", null, t =>
                        {
                            t.HasCheckConstraint("CK_Tareas_Fechas", "(`FechaEntrega` > `FechaAsignacion`)");

                            t.HasCheckConstraint("CK_Tareas_Penalizacion", "(`PenalizacionTardia` IS NULL OR (`PenalizacionTardia` >= 0 AND `PenalizacionTardia` <= 100))");

                            t.HasCheckConstraint("CK_Tareas_ValorPuntos", "(`ValorPuntos` > 0)");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Tareas.TareaEntrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<string>("ArchivoNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ArchivoRetroalimentacionNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ArchivoRetroalimentacionUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ArchivoTamano")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchivoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("Calificacion")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("CalificacionOriginal")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ComentariosAlumno")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("EsTardia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pendiente");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumeroIntento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("PenalizacionAplicada")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Retroalimentacion")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<int?>("RevisadoPorId")
                        .HasColumnType("int");

                    b.Property<int>("TareaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId")
                        .HasDatabaseName("IX_TareaEntregas_AlumnoId");

                    b.HasIndex("EscuelaId")
                        .HasDatabaseName("IX_TareaEntregas_EscuelaId");

                    b.HasIndex("Estatus")
                        .HasDatabaseName("IX_TareaEntregas_Estatus");

                    b.HasIndex("FechaEntrega")
                        .HasDatabaseName("IX_TareaEntregas_FechaEntrega");

                    b.HasIndex("RevisadoPorId");

                    b.HasIndex("TareaId")
                        .HasDatabaseName("IX_TareaEntregas_TareaId");

                    b.HasIndex("AlumnoId", "Estatus")
                        .HasDatabaseName("IX_TareaEntregas_Alumno_Estatus");

                    b.HasIndex("TareaId", "AlumnoId")
                        .IsUnique()
                        .HasDatabaseName("IX_TareaEntregas_Tarea_Alumno_Unique");

                    b.HasIndex("TareaId", "Estatus")
                        .HasDatabaseName("IX_TareaEntregas_Tarea_Estatus");

                    b.ToTable("TareaEntregas", null, t =>
                        {
                            t.HasCheckConstraint("CK_TareaEntregas_Calificacion", "`Calificacion` IS NULL OR (`Calificacion` >= 0 AND `Calificacion` <= 100)");

                            t.HasCheckConstraint("CK_TareaEntregas_CalificacionOriginal", "`CalificacionOriginal` IS NULL OR (`CalificacionOriginal` >= 0 AND `CalificacionOriginal` <= 100)");

                            t.HasCheckConstraint("CK_TareaEntregas_NumeroIntento", "`NumeroIntento` > 0");

                            t.HasCheckConstraint("CK_TareaEntregas_Penalizacion", "`PenalizacionAplicada` IS NULL OR `PenalizacionAplicada` >= 0");
                        });
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Usuarios.Dispositivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("device_name");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_registro");

                    b.Property<string>("IpUltimaConexion")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_ultima_conexion");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Navegador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("navegador");

                    b.Property<string>("SO")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("so");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tipo");

                    b.Property<string>("TokenFCM")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("token_fcm");

                    b.Property<DateTime>("UltimaActividad")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ultima_actividad");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasDatabaseName("idx_dispositivo_device_id");

                    b.HasIndex("UsuarioId", "Activo")
                        .HasDatabaseName("idx_dispositivo_usuario_activo");

                    b.ToTable("dispositivos", (string)null);
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellido_paterno");

                    b.Property<DateTime?>("BloqueadoHasta")
                        .HasColumnType("DATETIME")
                        .HasColumnName("bloqueado_hasta");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<int>("EscuelaId")
                        .HasColumnType("int")
                        .HasColumnName("escuela_id");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("FotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("foto_url");

                    b.Property<string>("Genero")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("genero");

                    b.Property<int>("IntentosFallidos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("intentos_fallidos");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("rol");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.Property<string>("TelefonoEmergencia")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono_emergencia");

                    b.Property<DateTime?>("TokenExpiracion")
                        .HasColumnType("DATETIME")
                        .HasColumnName("token_expiracion");

                    b.Property<string>("TokenRecuperacion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token_recuperacion");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("DATETIME")
                        .HasColumnName("ultimo_acceso");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("idx_usuario_activo");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_usuario_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("idx_usuario_username");

                    b.HasIndex("EscuelaId", "Rol")
                        .HasDatabaseName("idx_usuario_escuela_rol");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("HistorialPuntos", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Conducta.AlumnoPuntos", "AlumnoPuntos")
                        .WithMany("HistorialPuntos")
                        .HasForeignKey("AlumnoPuntosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlumnoPuntos");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Alumno", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany("Alumnos")
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithOne("Alumno")
                        .HasForeignKey("SchoolSystem.Domain.Entities.Academico.Alumno", "UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Escuela");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.AlumnoPadre", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany("AlumnoPadres")
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Padre", "Padre")
                        .WithMany("AlumnoPadres")
                        .HasForeignKey("PadreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Padre");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Grado", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.NivelEducativo", "NivelEducativo")
                        .WithMany("Grados")
                        .HasForeignKey("NivelEducativoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Escuela");

                    b.Navigation("NivelEducativo");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.GradoMateria", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grado", "Grado")
                        .WithMany()
                        .HasForeignKey("GradoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grado", null)
                        .WithMany("GradoMaterias")
                        .HasForeignKey("GradoId1");

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Materia", "Materia")
                        .WithMany("GradoMaterias")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grado");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Grupo", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", null)
                        .WithMany("Grupos")
                        .HasForeignKey("EscuelaId1");

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grado", "Grado")
                        .WithMany("Grupos")
                        .HasForeignKey("GradoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Maestro", "MaestroTitular")
                        .WithMany("GruposTitular")
                        .HasForeignKey("MaestroTitularId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Escuela");

                    b.Navigation("Grado");

                    b.Navigation("MaestroTitular");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.GrupoMateriaMaestro", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grupo", null)
                        .WithMany("AsignacionesMaterias")
                        .HasForeignKey("GrupoId1");

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Maestro", "Maestro")
                        .WithMany("AsignacionesMaterias")
                        .HasForeignKey("MaestroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Materia", "Materia")
                        .WithMany("AsignacionesGrupos")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Maestro");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Inscripcion", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany("Inscripciones")
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grupo", "Grupo")
                        .WithMany("Inscripciones")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Escuela");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Maestro", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithOne("Maestro")
                        .HasForeignKey("SchoolSystem.Domain.Entities.Academico.Maestro", "UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Escuela");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Materia", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", null)
                        .WithMany("Materias")
                        .HasForeignKey("EscuelaId1");

                    b.Navigation("Escuela");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.NivelEducativo", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", null)
                        .WithMany("NivelesEducativos")
                        .HasForeignKey("EscuelaId1");

                    b.Navigation("Escuela");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Padre", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithOne("Padre")
                        .HasForeignKey("SchoolSystem.Domain.Entities.Academico.Padre", "UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Escuela");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Auditoria.CambioEntidad", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Auditoria.LogAuditoria", "LogAuditoria")
                        .WithMany()
                        .HasForeignKey("LogAuditoriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LogAuditoria");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Auditoria.LogAuditoria", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Auditoria.Sincronizacion", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Biblioteca.Libro", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Biblioteca.CategoriaRecurso", "Categoria")
                        .WithMany("Recursos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Biblioteca.Prestamo", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "DevueltoPor")
                        .WithMany()
                        .HasForeignKey("DevueltoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Domain.Entities.Biblioteca.Libro", "Libro")
                        .WithMany("Prestamos")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Maestro", "Maestro")
                        .WithMany()
                        .HasForeignKey("MaestroId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "RegistradoPor")
                        .WithMany()
                        .HasForeignKey("RegistradoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("DevueltoPor");

                    b.Navigation("Libro");

                    b.Navigation("Maestro");

                    b.Navigation("RegistradoPor");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Calendario.Evento", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "CreadoPor")
                        .WithMany()
                        .HasForeignKey("CreadoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreadoPor");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.Comunicado", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "PublicadoPor")
                        .WithMany()
                        .HasForeignKey("PublicadoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("PublicadoPor");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.ComunicadoLectura", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Comunicacion.Comunicado", "Comunicado")
                        .WithMany("Lecturas")
                        .HasForeignKey("ComunicadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comunicado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.Mensaje", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "AlumnoRelacionado")
                        .WithMany()
                        .HasForeignKey("AlumnoRelacionadoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Comunicacion.Mensaje", "MensajePadre")
                        .WithMany("Respuestas")
                        .HasForeignKey("MensajePadreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Receptor")
                        .WithMany()
                        .HasForeignKey("ReceptorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlumnoRelacionado");

                    b.Navigation("Emisor");

                    b.Navigation("MensajePadre");

                    b.Navigation("Receptor");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.Notificacion", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "EnviadoPor")
                        .WithMany()
                        .HasForeignKey("EnviadoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "UsuarioDestinatario")
                        .WithMany()
                        .HasForeignKey("UsuarioDestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EnviadoPor");

                    b.Navigation("UsuarioDestinatario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.NotificacionSmsLog", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Comunicacion.Notificacion", "Notificacion")
                        .WithMany()
                        .HasForeignKey("NotificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notificacion");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.AlumnoInsignia", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Conducta.AlumnoPuntos", null)
                        .WithMany("InsigniasGanadas")
                        .HasForeignKey("AlumnoPuntosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Conducta.AlumnoPuntos", "AlumnoPuntos")
                        .WithMany()
                        .HasForeignKey("AlumnoPuntosId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Conducta.Insignia", "Insignia")
                        .WithMany("AlumnosQueGanaron")
                        .HasForeignKey("InsigniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlumnoPuntos");

                    b.Navigation("Insignia");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.AlumnoPuntos", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", null)
                        .WithMany("Puntos")
                        .HasForeignKey("AlumnoId1");

                    b.Navigation("Alumno");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.RegistroConducta", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", null)
                        .WithMany("RegistrosConducta")
                        .HasForeignKey("AlumnoId1");

                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Maestro", "Maestro")
                        .WithMany()
                        .HasForeignKey("MaestroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Escuela");

                    b.Navigation("Grupo");

                    b.Navigation("Maestro");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.Sancion", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "UsuarioAutorizo")
                        .WithMany()
                        .HasForeignKey("AutorizadoPor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Conducta.RegistroConducta", "Conducta")
                        .WithOne("Sancion")
                        .HasForeignKey("SchoolSystem.Domain.Entities.Conducta.Sancion", "ConductaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Conducta");

                    b.Navigation("Escuela");

                    b.Navigation("UsuarioAutorizo");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Configuracion.ParametroSistema", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "UsuarioUltimoCambio")
                        .WithMany()
                        .HasForeignKey("UsuarioUltimoCambioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UsuarioUltimoCambio");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Configuracion.PreferenciaUsuario", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Documentos.Documento", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "FirmadoPor")
                        .WithMany()
                        .HasForeignKey("FirmadoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "GeneradoPor")
                        .WithMany()
                        .HasForeignKey("GeneradoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Documentos.PlantillaDocumento", "PlantillaDocumento")
                        .WithMany("Documentos")
                        .HasForeignKey("PlantillaDocumentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FirmadoPor");

                    b.Navigation("GeneradoPor");

                    b.Navigation("PlantillaDocumento");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Documentos.ReportePersonalizado", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Creador")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creador");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Evaluacion.Asistencia", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", null)
                        .WithMany("Asistencias")
                        .HasForeignKey("AlumnoId1");

                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grupo", "Grupo")
                        .WithMany("Asistencias")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "UsuarioRegistro")
                        .WithMany()
                        .HasForeignKey("RegistradoPor")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Alumno");

                    b.Navigation("Escuela");

                    b.Navigation("Grupo");

                    b.Navigation("UsuarioRegistro");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Evaluacion.Calificacion", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany("Calificaciones")
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Maestro", "MaestroCaptura")
                        .WithMany()
                        .HasForeignKey("CapturadoPor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grupo", "Grupo")
                        .WithMany("Calificaciones")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Materia", "Materia")
                        .WithMany("Calificaciones")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Evaluacion.PeriodoEvaluacion", "Periodo")
                        .WithMany("Calificaciones")
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Escuela");

                    b.Navigation("Grupo");

                    b.Navigation("MaestroCaptura");

                    b.Navigation("Materia");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Evaluacion.PeriodoEvaluacion", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany()
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Escuela");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.Cargo", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "CanceladoPor")
                        .WithMany()
                        .HasForeignKey("CanceladoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Domain.Entities.Finanzas.ConceptoPago", "ConceptoPago")
                        .WithMany("Cargos")
                        .HasForeignKey("ConceptoPagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("CanceladoPor");

                    b.Navigation("ConceptoPago");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.ConceptoPago", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grado", "Grado")
                        .WithMany()
                        .HasForeignKey("GradoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.NivelEducativo", "NivelEducativo")
                        .WithMany()
                        .HasForeignKey("NivelEducativoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Grado");

                    b.Navigation("NivelEducativo");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.EstadoCuenta", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alumno");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.Pago", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "CanceladoPor")
                        .WithMany()
                        .HasForeignKey("CanceladoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Domain.Entities.Finanzas.Cargo", "Cargo")
                        .WithMany("Pagos")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "RecibidoPor")
                        .WithMany()
                        .HasForeignKey("RecibidoPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("CanceladoPor");

                    b.Navigation("Cargo");

                    b.Navigation("RecibidoPor");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.Alergia", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Medico.ExpedienteMedico", "ExpedienteMedico")
                        .WithMany("AlergiasRegistradas")
                        .HasForeignKey("ExpedienteMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpedienteMedico");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.ExpedienteMedico", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alumno");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.HistorialMedico", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Medico.ExpedienteMedico", "ExpedienteMedico")
                        .WithMany("HistorialMedico")
                        .HasForeignKey("ExpedienteMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "RegistradoPor")
                        .WithMany()
                        .HasForeignKey("RegistradoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpedienteMedico");

                    b.Navigation("RegistradoPor");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.Medicamento", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Medico.ExpedienteMedico", "ExpedienteMedico")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ExpedienteMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpedienteMedico");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.Vacuna", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Medico.ExpedienteMedico", "ExpedienteMedico")
                        .WithMany("Vacunas")
                        .HasForeignKey("ExpedienteMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpedienteMedico");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Tareas.Tarea", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Maestro", "Maestro")
                        .WithMany()
                        .HasForeignKey("MaestroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grupo");

                    b.Navigation("Maestro");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Tareas.TareaEntrega", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Domain.Entities.Academico.Maestro", "RevisadoPor")
                        .WithMany()
                        .HasForeignKey("RevisadoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Domain.Entities.Tareas.Tarea", "Tarea")
                        .WithMany("Entregas")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("RevisadoPor");

                    b.Navigation("Tarea");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Usuarios.Dispositivo", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany("Dispositivos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.HasOne("SchoolSystem.Domain.Entities.Escuelas.Escuela", "Escuela")
                        .WithMany("Usuarios")
                        .HasForeignKey("EscuelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escuela");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Alumno", b =>
                {
                    b.Navigation("AlumnoPadres");

                    b.Navigation("Asistencias");

                    b.Navigation("Calificaciones");

                    b.Navigation("Inscripciones");

                    b.Navigation("Puntos");

                    b.Navigation("RegistrosConducta");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Grado", b =>
                {
                    b.Navigation("GradoMaterias");

                    b.Navigation("Grupos");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Grupo", b =>
                {
                    b.Navigation("AsignacionesMaterias");

                    b.Navigation("Asistencias");

                    b.Navigation("Calificaciones");

                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Maestro", b =>
                {
                    b.Navigation("AsignacionesMaterias");

                    b.Navigation("GruposTitular");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Materia", b =>
                {
                    b.Navigation("AsignacionesGrupos");

                    b.Navigation("Calificaciones");

                    b.Navigation("GradoMaterias");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.NivelEducativo", b =>
                {
                    b.Navigation("Grados");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Academico.Padre", b =>
                {
                    b.Navigation("AlumnoPadres");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Biblioteca.CategoriaRecurso", b =>
                {
                    b.Navigation("Recursos");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Biblioteca.Libro", b =>
                {
                    b.Navigation("Prestamos");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.Comunicado", b =>
                {
                    b.Navigation("Lecturas");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Comunicacion.Mensaje", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.AlumnoPuntos", b =>
                {
                    b.Navigation("HistorialPuntos");

                    b.Navigation("InsigniasGanadas");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.Insignia", b =>
                {
                    b.Navigation("AlumnosQueGanaron");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Conducta.RegistroConducta", b =>
                {
                    b.Navigation("Sancion")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Documentos.PlantillaDocumento", b =>
                {
                    b.Navigation("Documentos");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Escuelas.Escuela", b =>
                {
                    b.Navigation("Alumnos");

                    b.Navigation("Grupos");

                    b.Navigation("Materias");

                    b.Navigation("NivelesEducativos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Evaluacion.PeriodoEvaluacion", b =>
                {
                    b.Navigation("Calificaciones");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.Cargo", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Finanzas.ConceptoPago", b =>
                {
                    b.Navigation("Cargos");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Medico.ExpedienteMedico", b =>
                {
                    b.Navigation("AlergiasRegistradas");

                    b.Navigation("HistorialMedico");

                    b.Navigation("Medicamentos");

                    b.Navigation("Vacunas");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Tareas.Tarea", b =>
                {
                    b.Navigation("Entregas");
                });

            modelBuilder.Entity("SchoolSystem.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.Navigation("Alumno")
                        .IsRequired();

                    b.Navigation("Dispositivos");

                    b.Navigation("Maestro")
                        .IsRequired();

                    b.Navigation("Padre")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
